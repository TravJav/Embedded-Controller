
Magic_Mirror.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb4  08001efc  08001efc  00011efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c0  20000024  08002ddc  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004e4  08002ddc  000204e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014f8e  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b14  00000000  00000000  00034fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006061  00000000  00000000  00037aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000800  00000000  00000000  0003db50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bd0  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005af7  00000000  00000000  0003ef20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d17  00000000  00000000  00044a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004772e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000181c  00000000  00000000  000477ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ee4 	.word	0x08001ee4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08001ee4 	.word	0x08001ee4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89a 	bl	800029c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f84e 	bl	8000218 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000020 	.word	0x20000020
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fd96 	bl	8001cdc <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000448 	.word	0x20000448
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000448 	.word	0x20000448

080001dc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001dc:	1ec3      	subs	r3, r0, #3
 80001de:	2b04      	cmp	r3, #4
{
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001e4:	d903      	bls.n	80001ee <HAL_NVIC_SetPriorityGrouping+0x12>
 80001e6:	21a2      	movs	r1, #162	; 0xa2
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80001ea:	f001 fbe4 	bl	80019b6 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f0:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fc:	041b      	lsls	r3, r3, #16
 80001fe:	0c1b      	lsrs	r3, r3, #16
 8000200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000208:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800020a:	60d4      	str	r4, [r2, #12]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop
 8000210:	08001f0c 	.word	0x08001f0c
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000218:	2a0f      	cmp	r2, #15
{ 
 800021a:	b570      	push	{r4, r5, r6, lr}
 800021c:	4604      	mov	r4, r0
 800021e:	460e      	mov	r6, r1
 8000220:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000222:	d903      	bls.n	800022c <HAL_NVIC_SetPriority+0x14>
 8000224:	21ba      	movs	r1, #186	; 0xba
 8000226:	481a      	ldr	r0, [pc, #104]	; (8000290 <HAL_NVIC_SetPriority+0x78>)
 8000228:	f001 fbc5 	bl	80019b6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800022c:	2e0f      	cmp	r6, #15
 800022e:	d903      	bls.n	8000238 <HAL_NVIC_SetPriority+0x20>
 8000230:	21bb      	movs	r1, #187	; 0xbb
 8000232:	4817      	ldr	r0, [pc, #92]	; (8000290 <HAL_NVIC_SetPriority+0x78>)
 8000234:	f001 fbbf 	bl	80019b6 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	68d9      	ldr	r1, [r3, #12]
 800023e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000242:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000246:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000248:	2b04      	cmp	r3, #4
 800024a:	bf28      	it	cs
 800024c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024e:	2a06      	cmp	r2, #6
 8000250:	bf94      	ite	ls
 8000252:	2100      	movls	r1, #0
 8000254:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000256:	fa00 f203 	lsl.w	r2, r0, r3
 800025a:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800025c:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000260:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000262:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000266:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	ea42 0205 	orr.w	r2, r2, r5
 800026c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	bfaf      	iteee	ge
 8000272:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	4b08      	ldrlt	r3, [pc, #32]	; (8000298 <HAL_NVIC_SetPriority+0x80>)
 8000278:	f004 040f 	andlt.w	r4, r4, #15
 800027c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	bfa5      	ittet	ge
 8000280:	b2d2      	uxtbge	r2, r2
 8000282:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 800028c:	bd70      	pop	{r4, r5, r6, pc}
 800028e:	bf00      	nop
 8000290:	08001f0c 	.word	0x08001f0c
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002cc:	4aaa      	ldr	r2, [pc, #680]	; (8000578 <HAL_GPIO_Init+0x2b0>)
{
 80002ce:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002d0:	4290      	cmp	r0, r2
{
 80002d2:	4604      	mov	r4, r0
 80002d4:	468b      	mov	fp, r1
 80002d6:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002d8:	d013      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002de:	4290      	cmp	r0, r2
 80002e0:	d00f      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002e6:	4290      	cmp	r0, r2
 80002e8:	d00b      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d007      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002f6:	4290      	cmp	r0, r2
 80002f8:	d003      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002fa:	21cd      	movs	r1, #205	; 0xcd
 80002fc:	489f      	ldr	r0, [pc, #636]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80002fe:	f001 fb5a 	bl	80019b6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000302:	f8db 2000 	ldr.w	r2, [fp]
 8000306:	b291      	uxth	r1, r2
 8000308:	b111      	cbz	r1, 8000310 <HAL_GPIO_Init+0x48>
 800030a:	0c12      	lsrs	r2, r2, #16
 800030c:	0412      	lsls	r2, r2, #16
 800030e:	b11a      	cbz	r2, 8000318 <HAL_GPIO_Init+0x50>
 8000310:	21ce      	movs	r1, #206	; 0xce
 8000312:	489a      	ldr	r0, [pc, #616]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000314:	f001 fb4f 	bl	80019b6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000318:	f8db 2004 	ldr.w	r2, [fp, #4]
 800031c:	2a03      	cmp	r2, #3
 800031e:	d917      	bls.n	8000350 <HAL_GPIO_Init+0x88>
 8000320:	f1a2 0111 	sub.w	r1, r2, #17
 8000324:	2901      	cmp	r1, #1
 8000326:	d913      	bls.n	8000350 <HAL_GPIO_Init+0x88>
 8000328:	4895      	ldr	r0, [pc, #596]	; (8000580 <HAL_GPIO_Init+0x2b8>)
 800032a:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800032e:	4281      	cmp	r1, r0
 8000330:	d00e      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000332:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000336:	4282      	cmp	r2, r0
 8000338:	d00a      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 800033a:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800033e:	4281      	cmp	r1, r0
 8000340:	d006      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000342:	4990      	ldr	r1, [pc, #576]	; (8000584 <HAL_GPIO_Init+0x2bc>)
 8000344:	428a      	cmp	r2, r1
 8000346:	d003      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000348:	21cf      	movs	r1, #207	; 0xcf
 800034a:	488c      	ldr	r0, [pc, #560]	; (800057c <HAL_GPIO_Init+0x2b4>)
 800034c:	f001 fb33 	bl	80019b6 <assert_failed>
{
 8000350:	2500      	movs	r5, #0
 8000352:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000354:	f8df a244 	ldr.w	sl, [pc, #580]	; 800059c <HAL_GPIO_Init+0x2d4>
 8000358:	4e8b      	ldr	r6, [pc, #556]	; (8000588 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 800035a:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800035c:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 8000360:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000364:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8000368:	45b9      	cmp	r9, r7
 800036a:	f040 808f 	bne.w	800048c <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	429c      	cmp	r4, r3
 8000372:	d011      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000374:	4985      	ldr	r1, [pc, #532]	; (800058c <HAL_GPIO_Init+0x2c4>)
 8000376:	428c      	cmp	r4, r1
 8000378:	d00e      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 800037a:	4b85      	ldr	r3, [pc, #532]	; (8000590 <HAL_GPIO_Init+0x2c8>)
 800037c:	429c      	cmp	r4, r3
 800037e:	d00b      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000384:	428c      	cmp	r4, r1
 8000386:	d007      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800038c:	428c      	cmp	r4, r1
 800038e:	d003      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000390:	21dd      	movs	r1, #221	; 0xdd
 8000392:	487a      	ldr	r0, [pc, #488]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000394:	f001 fb0f 	bl	80019b6 <assert_failed>
      switch (GPIO_Init->Mode)
 8000398:	f8db 1004 	ldr.w	r1, [fp, #4]
 800039c:	2912      	cmp	r1, #18
 800039e:	f000 80d3 	beq.w	8000548 <HAL_GPIO_Init+0x280>
 80003a2:	f200 808d 	bhi.w	80004c0 <HAL_GPIO_Init+0x1f8>
 80003a6:	2902      	cmp	r1, #2
 80003a8:	f000 80c1 	beq.w	800052e <HAL_GPIO_Init+0x266>
 80003ac:	d877      	bhi.n	800049e <HAL_GPIO_Init+0x1d6>
 80003ae:	2900      	cmp	r1, #0
 80003b0:	f000 8093 	beq.w	80004da <HAL_GPIO_Init+0x212>
 80003b4:	2901      	cmp	r1, #1
 80003b6:	f000 80ae 	beq.w	8000516 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ba:	2fff      	cmp	r7, #255	; 0xff
 80003bc:	bf82      	ittt	hi
 80003be:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 80003c2:	f1ae 0e08 	subhi.w	lr, lr, #8
 80003c6:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ca:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ce:	bf9d      	ittte	ls
 80003d0:	4620      	movls	r0, r4
 80003d2:	6822      	ldrls	r2, [r4, #0]
 80003d4:	ea4f 0188 	movls.w	r1, r8, lsl #2
 80003d8:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003da:	fa0e fc01 	lsl.w	ip, lr, r1
 80003de:	ea22 020c 	bic.w	r2, r2, ip
 80003e2:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e6:	bf88      	it	hi
 80003e8:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ea:	4311      	orrs	r1, r2
 80003ec:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ee:	f8db 0004 	ldr.w	r0, [fp, #4]
 80003f2:	00c3      	lsls	r3, r0, #3
 80003f4:	d54a      	bpl.n	800048c <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003fa:	f028 0103 	bic.w	r1, r8, #3
 80003fe:	f042 0201 	orr.w	r2, r2, #1
 8000402:	f8ca 2018 	str.w	r2, [sl, #24]
 8000406:	f8da 2018 	ldr.w	r2, [sl, #24]
 800040a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800040e:	f002 0201 	and.w	r2, r2, #1
 8000412:	9203      	str	r2, [sp, #12]
 8000414:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000418:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041c:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000420:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000424:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000426:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800042c:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000430:	f000 809b 	beq.w	800056a <HAL_GPIO_Init+0x2a2>
 8000434:	4a55      	ldr	r2, [pc, #340]	; (800058c <HAL_GPIO_Init+0x2c4>)
 8000436:	4294      	cmp	r4, r2
 8000438:	f000 8099 	beq.w	800056e <HAL_GPIO_Init+0x2a6>
 800043c:	4b54      	ldr	r3, [pc, #336]	; (8000590 <HAL_GPIO_Init+0x2c8>)
 800043e:	429c      	cmp	r4, r3
 8000440:	f000 8097 	beq.w	8000572 <HAL_GPIO_Init+0x2aa>
 8000444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000448:	4294      	cmp	r4, r2
 800044a:	bf14      	ite	ne
 800044c:	2204      	movne	r2, #4
 800044e:	2203      	moveq	r2, #3
 8000450:	fa02 f20c 	lsl.w	r2, r2, ip
 8000454:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8000458:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045a:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800045e:	bf4c      	ite	mi
 8000460:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000462:	43ba      	bicpl	r2, r7
 8000464:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000466:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000468:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800046a:	bf4c      	ite	mi
 800046c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800046e:	43ba      	bicpl	r2, r7
 8000470:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000472:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000474:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000476:	bf4c      	ite	mi
 8000478:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800047a:	43ba      	bicpl	r2, r7
 800047c:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800047e:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000480:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000482:	bf4c      	ite	mi
 8000484:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000486:	ea22 0707 	bicpl.w	r7, r2, r7
 800048a:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800048c:	f108 0801 	add.w	r8, r8, #1
 8000490:	f1b8 0f10 	cmp.w	r8, #16
 8000494:	f47f af61 	bne.w	800035a <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8000498:	b005      	add	sp, #20
 800049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800049e:	2903      	cmp	r1, #3
 80004a0:	d05f      	beq.n	8000562 <HAL_GPIO_Init+0x29a>
 80004a2:	2911      	cmp	r1, #17
 80004a4:	d189      	bne.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80004a6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80004aa:	3a01      	subs	r2, #1
 80004ac:	2a02      	cmp	r2, #2
 80004ae:	d903      	bls.n	80004b8 <HAL_GPIO_Init+0x1f0>
 80004b0:	21ec      	movs	r1, #236	; 0xec
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80004b4:	f001 fa7f 	bl	80019b6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004b8:	f8db 500c 	ldr.w	r5, [fp, #12]
 80004bc:	3504      	adds	r5, #4
          break;
 80004be:	e77c      	b.n	80003ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004c0:	4834      	ldr	r0, [pc, #208]	; (8000594 <HAL_GPIO_Init+0x2cc>)
 80004c2:	4281      	cmp	r1, r0
 80004c4:	d009      	beq.n	80004da <HAL_GPIO_Init+0x212>
 80004c6:	d81c      	bhi.n	8000502 <HAL_GPIO_Init+0x23a>
 80004c8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004cc:	4281      	cmp	r1, r0
 80004ce:	d004      	beq.n	80004da <HAL_GPIO_Init+0x212>
 80004d0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004d4:	4281      	cmp	r1, r0
 80004d6:	f47f af70 	bne.w	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80004da:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004de:	2902      	cmp	r1, #2
 80004e0:	d904      	bls.n	80004ec <HAL_GPIO_Init+0x224>
 80004e2:	f240 1107 	movw	r1, #263	; 0x107
 80004e6:	4825      	ldr	r0, [pc, #148]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80004e8:	f001 fa65 	bl	80019b6 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ec:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004f0:	b3c9      	cbz	r1, 8000566 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f2:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80004f4:	bf0c      	ite	eq
 80004f6:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80004fa:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fe:	2508      	movs	r5, #8
 8000500:	e75b      	b.n	80003ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000502:	4825      	ldr	r0, [pc, #148]	; (8000598 <HAL_GPIO_Init+0x2d0>)
 8000504:	4281      	cmp	r1, r0
 8000506:	d0e8      	beq.n	80004da <HAL_GPIO_Init+0x212>
 8000508:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800050c:	4281      	cmp	r1, r0
 800050e:	d0e4      	beq.n	80004da <HAL_GPIO_Init+0x212>
 8000510:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8000514:	e7de      	b.n	80004d4 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000516:	f8db 200c 	ldr.w	r2, [fp, #12]
 800051a:	3a01      	subs	r2, #1
 800051c:	2a02      	cmp	r2, #2
 800051e:	d903      	bls.n	8000528 <HAL_GPIO_Init+0x260>
 8000520:	21e5      	movs	r1, #229	; 0xe5
 8000522:	4816      	ldr	r0, [pc, #88]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000524:	f001 fa47 	bl	80019b6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000528:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 800052c:	e745      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800052e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000532:	3a01      	subs	r2, #1
 8000534:	2a02      	cmp	r2, #2
 8000536:	d903      	bls.n	8000540 <HAL_GPIO_Init+0x278>
 8000538:	21f3      	movs	r1, #243	; 0xf3
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <HAL_GPIO_Init+0x2b4>)
 800053c:	f001 fa3b 	bl	80019b6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000540:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000544:	3508      	adds	r5, #8
          break;
 8000546:	e738      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000548:	f8db 200c 	ldr.w	r2, [fp, #12]
 800054c:	3a01      	subs	r2, #1
 800054e:	2a02      	cmp	r2, #2
 8000550:	d903      	bls.n	800055a <HAL_GPIO_Init+0x292>
 8000552:	21fa      	movs	r1, #250	; 0xfa
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000556:	f001 fa2e 	bl	80019b6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800055a:	f8db 500c 	ldr.w	r5, [fp, #12]
 800055e:	350c      	adds	r5, #12
          break;
 8000560:	e72b      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000562:	2500      	movs	r5, #0
 8000564:	e729      	b.n	80003ba <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000566:	2504      	movs	r5, #4
 8000568:	e727      	b.n	80003ba <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800056a:	2200      	movs	r2, #0
 800056c:	e770      	b.n	8000450 <HAL_GPIO_Init+0x188>
 800056e:	2201      	movs	r2, #1
 8000570:	e76e      	b.n	8000450 <HAL_GPIO_Init+0x188>
 8000572:	2202      	movs	r2, #2
 8000574:	e76c      	b.n	8000450 <HAL_GPIO_Init+0x188>
 8000576:	bf00      	nop
 8000578:	40010800 	.word	0x40010800
 800057c:	08001f47 	.word	0x08001f47
 8000580:	10110000 	.word	0x10110000
 8000584:	10220000 	.word	0x10220000
 8000588:	40010400 	.word	0x40010400
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40011000 	.word	0x40011000
 8000594:	10210000 	.word	0x10210000
 8000598:	10310000 	.word	0x10310000
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4605      	mov	r5, r0
 80005a4:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005a6:	460c      	mov	r4, r1
 80005a8:	b921      	cbnz	r1, 80005b4 <HAL_GPIO_WritePin+0x14>
 80005aa:	f240 11e3 	movw	r1, #483	; 0x1e3
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <HAL_GPIO_WritePin+0x30>)
 80005b0:	f001 fa01 	bl	80019b6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80005b4:	2e01      	cmp	r6, #1
 80005b6:	d906      	bls.n	80005c6 <HAL_GPIO_WritePin+0x26>
 80005b8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <HAL_GPIO_WritePin+0x30>)
 80005be:	f001 f9fa 	bl	80019b6 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005c2:	612c      	str	r4, [r5, #16]
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d1fb      	bne.n	80005c2 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005ca:	0424      	lsls	r4, r4, #16
 80005cc:	e7f9      	b.n	80005c2 <HAL_GPIO_WritePin+0x22>
 80005ce:	bf00      	nop
 80005d0:	08001f47 	.word	0x08001f47

080005d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005d4:	b538      	push	{r3, r4, r5, lr}
 80005d6:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005d8:	460c      	mov	r4, r1
 80005da:	b921      	cbnz	r1, 80005e6 <HAL_GPIO_TogglePin+0x12>
 80005dc:	f240 11f9 	movw	r1, #505	; 0x1f9
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <HAL_GPIO_TogglePin+0x1c>)
 80005e2:	f001 f9e8 	bl	80019b6 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80005e6:	68eb      	ldr	r3, [r5, #12]
 80005e8:	405c      	eors	r4, r3
 80005ea:	60ec      	str	r4, [r5, #12]
 80005ec:	bd38      	pop	{r3, r4, r5, pc}
 80005ee:	bf00      	nop
 80005f0:	08001f47 	.word	0x08001f47

080005f4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	6953      	ldr	r3, [r2, #20]
 80005f8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80005fc:	d00d      	beq.n	800061a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005fe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000602:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000604:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000606:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000608:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800060a:	2300      	movs	r3, #0
 800060c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800060e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000612:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	4770      	bx	lr
  }
  return HAL_OK;
 800061a:	4618      	mov	r0, r3
}
 800061c:	4770      	bx	lr

0800061e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800061e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	4617      	mov	r7, r2
 8000626:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000628:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800062c:	b28e      	uxth	r6, r1
 800062e:	6825      	ldr	r5, [r4, #0]
 8000630:	f1b8 0f01 	cmp.w	r8, #1
 8000634:	bf0c      	ite	eq
 8000636:	696b      	ldreq	r3, [r5, #20]
 8000638:	69ab      	ldrne	r3, [r5, #24]
 800063a:	ea36 0303 	bics.w	r3, r6, r3
 800063e:	bf14      	ite	ne
 8000640:	2001      	movne	r0, #1
 8000642:	2000      	moveq	r0, #0
 8000644:	b908      	cbnz	r0, 800064a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800064a:	696b      	ldr	r3, [r5, #20]
 800064c:	055a      	lsls	r2, r3, #21
 800064e:	d512      	bpl.n	8000676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000650:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000652:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000658:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800065a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800065e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000660:	2304      	movs	r3, #4
 8000662:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000664:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000666:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000668:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800066a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800066e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000676:	1c7b      	adds	r3, r7, #1
 8000678:	d0d9      	beq.n	800062e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800067a:	b94f      	cbnz	r7, 8000690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800067c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800067e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000680:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000682:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000686:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800068a:	2003      	movs	r0, #3
 800068c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000690:	f7ff fd9e 	bl	80001d0 <HAL_GetTick>
 8000694:	eba0 0009 	sub.w	r0, r0, r9
 8000698:	4287      	cmp	r7, r0
 800069a:	d2c8      	bcs.n	800062e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800069c:	e7ee      	b.n	800067c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800069e <I2C_WaitOnFlagUntilTimeout>:
{
 800069e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a2:	4604      	mov	r4, r0
 80006a4:	4690      	mov	r8, r2
 80006a6:	461f      	mov	r7, r3
 80006a8:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80006aa:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80006ae:	b28d      	uxth	r5, r1
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	f1b9 0f01 	cmp.w	r9, #1
 80006b6:	bf0c      	ite	eq
 80006b8:	695b      	ldreq	r3, [r3, #20]
 80006ba:	699b      	ldrne	r3, [r3, #24]
 80006bc:	ea35 0303 	bics.w	r3, r5, r3
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	4543      	cmp	r3, r8
 80006c8:	d002      	beq.n	80006d0 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80006ca:	2000      	movs	r0, #0
}
 80006cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80006d0:	1c7b      	adds	r3, r7, #1
 80006d2:	d0ed      	beq.n	80006b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80006d4:	b95f      	cbnz	r7, 80006ee <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80006d6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80006d8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80006da:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80006dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80006e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80006e4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80006e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80006ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	4287      	cmp	r7, r0
 80006f6:	d2db      	bcs.n	80006b0 <I2C_WaitOnFlagUntilTimeout+0x12>
 80006f8:	e7ed      	b.n	80006d6 <I2C_WaitOnFlagUntilTimeout+0x38>

080006fa <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80006fa:	b570      	push	{r4, r5, r6, lr}
 80006fc:	4604      	mov	r4, r0
 80006fe:	460d      	mov	r5, r1
 8000700:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	061b      	lsls	r3, r3, #24
 8000708:	d501      	bpl.n	800070e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800070a:	2000      	movs	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800070e:	4620      	mov	r0, r4
 8000710:	f7ff ff70 	bl	80005f4 <I2C_IsAcknowledgeFailed>
 8000714:	b9a8      	cbnz	r0, 8000742 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000716:	1c6a      	adds	r2, r5, #1
 8000718:	d0f3      	beq.n	8000702 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800071a:	b965      	cbnz	r5, 8000736 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800071c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800071e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000720:	f043 0320 	orr.w	r3, r3, #32
 8000724:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000726:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000728:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800072a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800072c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000730:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000734:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000736:	f7ff fd4b 	bl	80001d0 <HAL_GetTick>
 800073a:	1b80      	subs	r0, r0, r6
 800073c:	4285      	cmp	r5, r0
 800073e:	d2e0      	bcs.n	8000702 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000740:	e7ec      	b.n	800071c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000742:	2001      	movs	r0, #1
}
 8000744:	bd70      	pop	{r4, r5, r6, pc}

08000746 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000746:	b570      	push	{r4, r5, r6, lr}
 8000748:	4604      	mov	r4, r0
 800074a:	460d      	mov	r5, r1
 800074c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	075b      	lsls	r3, r3, #29
 8000754:	d501      	bpl.n	800075a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000756:	2000      	movs	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800075a:	4620      	mov	r0, r4
 800075c:	f7ff ff4a 	bl	80005f4 <I2C_IsAcknowledgeFailed>
 8000760:	b9a8      	cbnz	r0, 800078e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000762:	1c6a      	adds	r2, r5, #1
 8000764:	d0f3      	beq.n	800074e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000766:	b965      	cbnz	r5, 8000782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000768:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800076a:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000772:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000774:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000776:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000778:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800077c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000780:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000782:	f7ff fd25 	bl	80001d0 <HAL_GetTick>
 8000786:	1b80      	subs	r0, r0, r6
 8000788:	4285      	cmp	r5, r0
 800078a:	d2e0      	bcs.n	800074e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800078c:	e7ec      	b.n	8000768 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800078e:	2001      	movs	r0, #1
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
	...

08000794 <HAL_I2C_Init>:
{
 8000794:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000796:	4604      	mov	r4, r0
 8000798:	b908      	cbnz	r0, 800079e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800079a:	2001      	movs	r0, #1
 800079c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	4a65      	ldr	r2, [pc, #404]	; (8000938 <HAL_I2C_Init+0x1a4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d008      	beq.n	80007b8 <HAL_I2C_Init+0x24>
 80007a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d004      	beq.n	80007b8 <HAL_I2C_Init+0x24>
 80007ae:	f240 117d 	movw	r1, #381	; 0x17d
 80007b2:	4862      	ldr	r0, [pc, #392]	; (800093c <HAL_I2C_Init+0x1a8>)
 80007b4:	f001 f8ff 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80007b8:	6863      	ldr	r3, [r4, #4]
 80007ba:	4a61      	ldr	r2, [pc, #388]	; (8000940 <HAL_I2C_Init+0x1ac>)
 80007bc:	3b01      	subs	r3, #1
 80007be:	4293      	cmp	r3, r2
 80007c0:	d904      	bls.n	80007cc <HAL_I2C_Init+0x38>
 80007c2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80007c6:	485d      	ldr	r0, [pc, #372]	; (800093c <HAL_I2C_Init+0x1a8>)
 80007c8:	f001 f8f5 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80007cc:	68a3      	ldr	r3, [r4, #8]
 80007ce:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80007d2:	d004      	beq.n	80007de <HAL_I2C_Init+0x4a>
 80007d4:	f240 117f 	movw	r1, #383	; 0x17f
 80007d8:	4858      	ldr	r0, [pc, #352]	; (800093c <HAL_I2C_Init+0x1a8>)
 80007da:	f001 f8ec 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80007de:	68e3      	ldr	r3, [r4, #12]
 80007e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80007e4:	f023 0303 	bic.w	r3, r3, #3
 80007e8:	b123      	cbz	r3, 80007f4 <HAL_I2C_Init+0x60>
 80007ea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80007ee:	4853      	ldr	r0, [pc, #332]	; (800093c <HAL_I2C_Init+0x1a8>)
 80007f0:	f001 f8e1 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80007f4:	6923      	ldr	r3, [r4, #16]
 80007f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007fe:	d004      	beq.n	800080a <HAL_I2C_Init+0x76>
 8000800:	f240 1181 	movw	r1, #385	; 0x181
 8000804:	484d      	ldr	r0, [pc, #308]	; (800093c <HAL_I2C_Init+0x1a8>)
 8000806:	f001 f8d6 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800080a:	6963      	ldr	r3, [r4, #20]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d904      	bls.n	800081a <HAL_I2C_Init+0x86>
 8000810:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8000814:	4849      	ldr	r0, [pc, #292]	; (800093c <HAL_I2C_Init+0x1a8>)
 8000816:	f001 f8ce 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800081a:	69a3      	ldr	r3, [r4, #24]
 800081c:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8000820:	d004      	beq.n	800082c <HAL_I2C_Init+0x98>
 8000822:	f240 1183 	movw	r1, #387	; 0x183
 8000826:	4845      	ldr	r0, [pc, #276]	; (800093c <HAL_I2C_Init+0x1a8>)
 8000828:	f001 f8c5 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800082c:	69e3      	ldr	r3, [r4, #28]
 800082e:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8000832:	d004      	beq.n	800083e <HAL_I2C_Init+0xaa>
 8000834:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8000838:	4840      	ldr	r0, [pc, #256]	; (800093c <HAL_I2C_Init+0x1a8>)
 800083a:	f001 f8bc 	bl	80019b6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800083e:	6a23      	ldr	r3, [r4, #32]
 8000840:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000844:	d004      	beq.n	8000850 <HAL_I2C_Init+0xbc>
 8000846:	f240 1185 	movw	r1, #389	; 0x185
 800084a:	483c      	ldr	r0, [pc, #240]	; (800093c <HAL_I2C_Init+0x1a8>)
 800084c:	f001 f8b3 	bl	80019b6 <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000850:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000854:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000858:	b923      	cbnz	r3, 8000864 <HAL_I2C_Init+0xd0>
    hi2c->Lock = HAL_UNLOCKED;
 800085a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800085e:	4620      	mov	r0, r4
 8000860:	f001 f826 	bl	80018b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000864:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000866:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000874:	f000 fd42 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	4a32      	ldr	r2, [pc, #200]	; (8000944 <HAL_I2C_Init+0x1b0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d830      	bhi.n	80008e2 <HAL_I2C_Init+0x14e>
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <HAL_I2C_Init+0x1b4>)
 8000882:	4290      	cmp	r0, r2
 8000884:	d989      	bls.n	800079a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000886:	4a31      	ldr	r2, [pc, #196]	; (800094c <HAL_I2C_Init+0x1b8>)
  hi2c->Instance->CR2 = freqrange;
 8000888:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800088a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800088e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000890:	3201      	adds	r2, #1
 8000892:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000894:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <HAL_I2C_Init+0x1b0>)
 8000896:	3801      	subs	r0, #1
 8000898:	4293      	cmp	r3, r2
 800089a:	d833      	bhi.n	8000904 <HAL_I2C_Init+0x170>
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fbb0 f0f3 	udiv	r0, r0, r3
 80008a2:	1c43      	adds	r3, r0, #1
 80008a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	bf38      	it	cc
 80008ac:	2304      	movcc	r3, #4
 80008ae:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008b0:	6a22      	ldr	r2, [r4, #32]
 80008b2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008b4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008b6:	4313      	orrs	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80008ba:	68e2      	ldr	r2, [r4, #12]
 80008bc:	6923      	ldr	r3, [r4, #16]
 80008be:	4313      	orrs	r3, r2
 80008c0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80008c2:	69a2      	ldr	r2, [r4, #24]
 80008c4:	6963      	ldr	r3, [r4, #20]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80008ca:	680b      	ldr	r3, [r1, #0]
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80008d2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008d4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008dc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80008e0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <HAL_I2C_Init+0x1bc>)
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f67f af58 	bls.w	800079a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80008ea:	4d18      	ldr	r5, [pc, #96]	; (800094c <HAL_I2C_Init+0x1b8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80008f0:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80008f4:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008f6:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80008f8:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008fa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80008fe:	fbb2 f2f5 	udiv	r2, r2, r5
 8000902:	e7c5      	b.n	8000890 <HAL_I2C_Init+0xfc>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000904:	68a2      	ldr	r2, [r4, #8]
 8000906:	b952      	cbnz	r2, 800091e <HAL_I2C_Init+0x18a>
 8000908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800090c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000916:	b16b      	cbz	r3, 8000934 <HAL_I2C_Init+0x1a0>
 8000918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091c:	e7c7      	b.n	80008ae <HAL_I2C_Init+0x11a>
 800091e:	2219      	movs	r2, #25
 8000920:	4353      	muls	r3, r2
 8000922:	fbb0 f0f3 	udiv	r0, r0, r3
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800092c:	b113      	cbz	r3, 8000934 <HAL_I2C_Init+0x1a0>
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	e7bc      	b.n	80008ae <HAL_I2C_Init+0x11a>
 8000934:	2301      	movs	r3, #1
 8000936:	e7ba      	b.n	80008ae <HAL_I2C_Init+0x11a>
 8000938:	40005400 	.word	0x40005400
 800093c:	08001f80 	.word	0x08001f80
 8000940:	00061a7f 	.word	0x00061a7f
 8000944:	000186a0 	.word	0x000186a0
 8000948:	001e847f 	.word	0x001e847f
 800094c:	000f4240 	.word	0x000f4240
 8000950:	003d08ff 	.word	0x003d08ff

08000954 <HAL_I2C_Master_Transmit>:
{
 8000954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000958:	4604      	mov	r4, r0
 800095a:	461f      	mov	r7, r3
 800095c:	460d      	mov	r5, r1
 800095e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000960:	f7ff fc36 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000964:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000968:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800096a:	2b20      	cmp	r3, #32
 800096c:	d004      	beq.n	8000978 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800096e:	2502      	movs	r5, #2
}
 8000970:	4628      	mov	r0, r5
 8000972:	b004      	add	sp, #16
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000978:	9000      	str	r0, [sp, #0]
 800097a:	2319      	movs	r3, #25
 800097c:	2201      	movs	r2, #1
 800097e:	495d      	ldr	r1, [pc, #372]	; (8000af4 <HAL_I2C_Master_Transmit+0x1a0>)
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff fe8c 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000986:	2800      	cmp	r0, #0
 8000988:	d1f1      	bne.n	800096e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800098a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800098e:	2b01      	cmp	r3, #1
 8000990:	d0ed      	beq.n	800096e <HAL_I2C_Master_Transmit+0x1a>
 8000992:	2301      	movs	r3, #1
 8000994:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800099e:	bf5e      	ittt	pl
 80009a0:	681a      	ldrpl	r2, [r3, #0]
 80009a2:	f042 0201 	orrpl.w	r2, r2, #1
 80009a6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ae:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009b0:	2221      	movs	r2, #33	; 0x21
 80009b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009b6:	2210      	movs	r2, #16
 80009b8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009bc:	2200      	movs	r2, #0
 80009be:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009c0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80009c4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009c6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80009c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80009ca:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80009ce:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80009d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80009d2:	2a04      	cmp	r2, #4
 80009d4:	d004      	beq.n	80009e0 <HAL_I2C_Master_Transmit+0x8c>
 80009d6:	2a01      	cmp	r2, #1
 80009d8:	d002      	beq.n	80009e0 <HAL_I2C_Master_Transmit+0x8c>
 80009da:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80009de:	d104      	bne.n	80009ea <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e002      	b.n	80009f0 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80009ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80009ec:	2a12      	cmp	r2, #18
 80009ee:	d0f7      	beq.n	80009e0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80009f0:	9600      	str	r6, [sp, #0]
 80009f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009f4:	2200      	movs	r2, #0
 80009f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80009fa:	4620      	mov	r0, r4
 80009fc:	f7ff fe4f 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000a00:	bb28      	cbnz	r0, 8000a4e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a02:	6923      	ldr	r3, [r4, #16]
 8000a04:	6822      	ldr	r2, [r4, #0]
 8000a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a0a:	d112      	bne.n	8000a32 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a0c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000a10:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a12:	4633      	mov	r3, r6
 8000a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000a16:	4938      	ldr	r1, [pc, #224]	; (8000af8 <HAL_I2C_Master_Transmit+0x1a4>)
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff fe00 	bl	800061e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a1e:	4605      	mov	r5, r0
 8000a20:	b9a0      	cbnz	r0, 8000a4c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	9003      	str	r0, [sp, #12]
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	9203      	str	r2, [sp, #12]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	9303      	str	r3, [sp, #12]
 8000a2e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000a30:	e050      	b.n	8000ad4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000a32:	11eb      	asrs	r3, r5, #7
 8000a34:	f003 0306 	and.w	r3, r3, #6
 8000a38:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a3c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000a3e:	492f      	ldr	r1, [pc, #188]	; (8000afc <HAL_I2C_Master_Transmit+0x1a8>)
 8000a40:	4633      	mov	r3, r6
 8000a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000a44:	4620      	mov	r0, r4
 8000a46:	f7ff fdea 	bl	800061e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a4a:	b148      	cbz	r0, 8000a60 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	d107      	bne.n	8000a68 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000a58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000a5c:	2501      	movs	r5, #1
 8000a5e:	e787      	b.n	8000970 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	b2ed      	uxtb	r5, r5
 8000a64:	611d      	str	r5, [r3, #16]
 8000a66:	e7d4      	b.n	8000a12 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000a68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000a6c:	2503      	movs	r5, #3
 8000a6e:	e77f      	b.n	8000970 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a70:	4632      	mov	r2, r6
 8000a72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a74:	4620      	mov	r0, r4
 8000a76:	f7ff fe40 	bl	80006fa <I2C_WaitOnTXEFlagUntilTimeout>
 8000a7a:	b140      	cbz	r0, 8000a8e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d1f4      	bne.n	8000a6c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e7e6      	b.n	8000a5c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a90:	6820      	ldr	r0, [r4, #0]
 8000a92:	1c4b      	adds	r3, r1, #1
 8000a94:	6263      	str	r3, [r4, #36]	; 0x24
 8000a96:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000a98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a9a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000a9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000aa4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000aa6:	1e53      	subs	r3, r2, #1
 8000aa8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000aaa:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000aac:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000aae:	d50a      	bpl.n	8000ac6 <HAL_I2C_Master_Transmit+0x172>
 8000ab0:	b14b      	cbz	r3, 8000ac6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000ab2:	1c8b      	adds	r3, r1, #2
 8000ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ab6:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000ab8:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000aba:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000abc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000abe:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ac6:	4632      	mov	r2, r6
 8000ac8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000aca:	4620      	mov	r0, r4
 8000acc:	f7ff fe3b 	bl	8000746 <I2C_WaitOnBTFFlagUntilTimeout>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1d3      	bne.n	8000a7c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1ca      	bne.n	8000a70 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ada:	6821      	ldr	r1, [r4, #0]
 8000adc:	680a      	ldr	r2, [r1, #0]
 8000ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ae2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ae4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000ae6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000aea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000af2:	e73d      	b.n	8000970 <HAL_I2C_Master_Transmit+0x1c>
 8000af4:	00100002 	.word	0x00100002
 8000af8:	00010002 	.word	0x00010002
 8000afc:	00010008 	.word	0x00010008

08000b00 <HAL_I2C_IsDeviceReady>:
{
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	4604      	mov	r4, r0
 8000b06:	b085      	sub	sp, #20
 8000b08:	4698      	mov	r8, r3
 8000b0a:	4689      	mov	r9, r1
 8000b0c:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8000b0e:	f7ff fb5f 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b12:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000b16:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	d003      	beq.n	8000b24 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000b1c:	2002      	movs	r0, #2
}
 8000b1e:	b005      	add	sp, #20
 8000b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b24:	9000      	str	r0, [sp, #0]
 8000b26:	2319      	movs	r3, #25
 8000b28:	2201      	movs	r2, #1
 8000b2a:	494b      	ldr	r1, [pc, #300]	; (8000c58 <HAL_I2C_IsDeviceReady+0x158>)
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff fdb6 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d1f2      	bne.n	8000b1c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8000b36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d0ee      	beq.n	8000b1c <HAL_I2C_IsDeviceReady+0x1c>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b44:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b46:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b48:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b4a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000c58 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b4e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000b50:	bf58      	it	pl
 8000b52:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b54:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8000b58:	bf5c      	itt	pl
 8000b5a:	f042 0201 	orrpl.w	r2, r2, #1
 8000b5e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b66:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000b68:	2324      	movs	r3, #36	; 0x24
 8000b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b70:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b72:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b74:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b7a:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000b7c:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000b84:	9600      	str	r6, [sp, #0]
 8000b86:	4643      	mov	r3, r8
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f7ff fd88 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000b8e:	b108      	cbz	r0, 8000b94 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8000b90:	2003      	movs	r0, #3
 8000b92:	e7c4      	b.n	8000b1e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b94:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000b96:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b98:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8000b9c:	f7ff fb18 	bl	80001d0 <HAL_GetTick>
 8000ba0:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ba6:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8000ba8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000bac:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000bb0:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8000bb4:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000bb6:	b911      	cbnz	r1, 8000bbe <HAL_I2C_IsDeviceReady+0xbe>
 8000bb8:	b90a      	cbnz	r2, 8000bbe <HAL_I2C_IsDeviceReady+0xbe>
 8000bba:	2ba0      	cmp	r3, #160	; 0xa0
 8000bbc:	d120      	bne.n	8000c00 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8000bbe:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000bc0:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8000bc2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bd2:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000bd4:	d02a      	beq.n	8000c2c <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	9203      	str	r2, [sp, #12]
 8000bda:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000bdc:	491e      	ldr	r1, [pc, #120]	; (8000c58 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bde:	9203      	str	r2, [sp, #12]
 8000be0:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000be2:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000be4:	9303      	str	r3, [sp, #12]
 8000be6:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000be8:	9600      	str	r6, [sp, #0]
 8000bea:	2319      	movs	r3, #25
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff fd56 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d1cc      	bne.n	8000b90 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8000bf6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000bfa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8000bfe:	e78e      	b.n	8000b1e <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c00:	f1b8 0f00 	cmp.w	r8, #0
 8000c04:	d10c      	bne.n	8000c20 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000c06:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c0e:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8000c10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000c14:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c18:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	e7ca      	b.n	8000bb6 <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c20:	f7ff fad6 	bl	80001d0 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	4580      	cmp	r8, r0
 8000c28:	d3ed      	bcc.n	8000c06 <HAL_I2C_IsDeviceReady+0x106>
 8000c2a:	e7ee      	b.n	8000c0a <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c30:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c32:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c34:	4620      	mov	r0, r4
 8000c36:	9600      	str	r6, [sp, #0]
 8000c38:	2319      	movs	r3, #25
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f7ff fd2f 	bl	800069e <I2C_WaitOnFlagUntilTimeout>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d1a5      	bne.n	8000b90 <HAL_I2C_IsDeviceReady+0x90>
 8000c44:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8000c46:	45aa      	cmp	sl, r5
 8000c48:	d894      	bhi.n	8000b74 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8000c4a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000c4e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e763      	b.n	8000b1e <HAL_I2C_IsDeviceReady+0x1e>
 8000c56:	bf00      	nop
 8000c58:	00100002 	.word	0x00100002
 8000c5c:	ffff0000 	.word	0xffff0000

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8000c64:	4604      	mov	r4, r0
 8000c66:	b920      	cbnz	r0, 8000c72 <HAL_RCC_OscConfig+0x12>
 8000c68:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000c6c:	48a5      	ldr	r0, [pc, #660]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000c6e:	f000 fea2 	bl	80019b6 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	b133      	cbz	r3, 8000c84 <HAL_RCC_OscConfig+0x24>
 8000c76:	071a      	lsls	r2, r3, #28
 8000c78:	d104      	bne.n	8000c84 <HAL_RCC_OscConfig+0x24>
 8000c7a:	f240 1171 	movw	r1, #369	; 0x171
 8000c7e:	48a1      	ldr	r0, [pc, #644]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000c80:	f000 fe99 	bl	80019b6 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	07db      	lsls	r3, r3, #31
 8000c88:	d418      	bmi.n	8000cbc <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	079f      	lsls	r7, r3, #30
 8000c8e:	d472      	bmi.n	8000d76 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	0719      	lsls	r1, r3, #28
 8000c94:	f100 80b9 	bmi.w	8000e0a <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	075a      	lsls	r2, r3, #29
 8000c9c:	f100 80eb 	bmi.w	8000e76 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000ca0:	69e3      	ldr	r3, [r4, #28]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d904      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x50>
 8000ca6:	f240 21b9 	movw	r1, #697	; 0x2b9
 8000caa:	4896      	ldr	r0, [pc, #600]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000cac:	f000 fe83 	bl	80019b6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cb0:	69e2      	ldr	r2, [r4, #28]
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 815e 	bne.w	8000f74 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e020      	b.n	8000cfe <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000cc2:	d007      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x74>
 8000cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc8:	d004      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x74>
 8000cca:	f240 1177 	movw	r1, #375	; 0x177
 8000cce:	488d      	ldr	r0, [pc, #564]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000cd0:	f000 fe71 	bl	80019b6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd4:	4d8c      	ldr	r5, [pc, #560]	; (8000f08 <HAL_RCC_OscConfig+0x2a8>)
 8000cd6:	686b      	ldr	r3, [r5, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d007      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce0:	686b      	ldr	r3, [r5, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0xa4>
 8000cea:	686b      	ldr	r3, [r5, #4]
 8000cec:	03de      	lsls	r6, r3, #15
 8000cee:	d509      	bpl.n	8000d04 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	039d      	lsls	r5, r3, #14
 8000cf4:	d5c9      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x2a>
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1c6      	bne.n	8000c8a <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8000cfc:	2001      	movs	r0, #1
}
 8000cfe:	b002      	add	sp, #8
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d04:	6863      	ldr	r3, [r4, #4]
 8000d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0a:	d110      	bne.n	8000d2e <HAL_RCC_OscConfig+0xce>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d14:	f7ff fa5c 	bl	80001d0 <HAL_GetTick>
 8000d18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	0398      	lsls	r0, r3, #14
 8000d1e:	d4b4      	bmi.n	8000c8a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fa56 	bl	80001d0 <HAL_GetTick>
 8000d24:	1b80      	subs	r0, r0, r6
 8000d26:	2864      	cmp	r0, #100	; 0x64
 8000d28:	d9f7      	bls.n	8000d1a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e7e7      	b.n	8000cfe <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	b99b      	cbnz	r3, 8000d58 <HAL_RCC_OscConfig+0xf8>
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d36:	602b      	str	r3, [r5, #0]
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fa46 	bl	80001d0 <HAL_GetTick>
 8000d44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	682b      	ldr	r3, [r5, #0]
 8000d48:	0399      	lsls	r1, r3, #14
 8000d4a:	d59e      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fa40 	bl	80001d0 <HAL_GetTick>
 8000d50:	1b80      	subs	r0, r0, r6
 8000d52:	2864      	cmp	r0, #100	; 0x64
 8000d54:	d9f7      	bls.n	8000d46 <HAL_RCC_OscConfig+0xe6>
 8000d56:	e7e8      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5c:	682b      	ldr	r3, [r5, #0]
 8000d5e:	d103      	bne.n	8000d68 <HAL_RCC_OscConfig+0x108>
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	e7d1      	b.n	8000d0c <HAL_RCC_OscConfig+0xac>
 8000d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6c:	602b      	str	r3, [r5, #0]
 8000d6e:	682b      	ldr	r3, [r5, #0]
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d74:	e7cd      	b.n	8000d12 <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000d76:	6923      	ldr	r3, [r4, #16]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d904      	bls.n	8000d86 <HAL_RCC_OscConfig+0x126>
 8000d7c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000d80:	4860      	ldr	r0, [pc, #384]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000d82:	f000 fe18 	bl	80019b6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000d86:	6963      	ldr	r3, [r4, #20]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d904      	bls.n	8000d96 <HAL_RCC_OscConfig+0x136>
 8000d8c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000d90:	485c      	ldr	r0, [pc, #368]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000d92:	f000 fe10 	bl	80019b6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d96:	4d5c      	ldr	r5, [pc, #368]	; (8000f08 <HAL_RCC_OscConfig+0x2a8>)
 8000d98:	686b      	ldr	r3, [r5, #4]
 8000d9a:	f013 0f0c 	tst.w	r3, #12
 8000d9e:	d007      	beq.n	8000db0 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da0:	686b      	ldr	r3, [r5, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d110      	bne.n	8000dcc <HAL_RCC_OscConfig+0x16c>
 8000daa:	686b      	ldr	r3, [r5, #4]
 8000dac:	03da      	lsls	r2, r3, #15
 8000dae:	d40d      	bmi.n	8000dcc <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	079b      	lsls	r3, r3, #30
 8000db4:	d502      	bpl.n	8000dbc <HAL_RCC_OscConfig+0x15c>
 8000db6:	6923      	ldr	r3, [r4, #16]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d19f      	bne.n	8000cfc <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	6962      	ldr	r2, [r4, #20]
 8000dc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dc4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dc8:	602b      	str	r3, [r5, #0]
 8000dca:	e761      	b.n	8000c90 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dcc:	6922      	ldr	r2, [r4, #16]
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	b16a      	cbz	r2, 8000dee <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff f9fb 	bl	80001d0 <HAL_GetTick>
 8000dda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	079f      	lsls	r7, r3, #30
 8000de0:	d4ec      	bmi.n	8000dbc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff f9f5 	bl	80001d0 <HAL_GetTick>
 8000de6:	1b80      	subs	r0, r0, r6
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9f7      	bls.n	8000ddc <HAL_RCC_OscConfig+0x17c>
 8000dec:	e79d      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8000dee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df0:	f7ff f9ee 	bl	80001d0 <HAL_GetTick>
 8000df4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	682b      	ldr	r3, [r5, #0]
 8000df8:	0798      	lsls	r0, r3, #30
 8000dfa:	f57f af49 	bpl.w	8000c90 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfe:	f7ff f9e7 	bl	80001d0 <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d9f6      	bls.n	8000df6 <HAL_RCC_OscConfig+0x196>
 8000e08:	e78f      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e0a:	69a3      	ldr	r3, [r4, #24]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d904      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1ba>
 8000e10:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000e14:	483b      	ldr	r0, [pc, #236]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000e16:	f000 fdce 	bl	80019b6 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e1a:	69a2      	ldr	r2, [r4, #24]
 8000e1c:	4d3a      	ldr	r5, [pc, #232]	; (8000f08 <HAL_RCC_OscConfig+0x2a8>)
 8000e1e:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <HAL_RCC_OscConfig+0x2b0>)
 8000e20:	b1da      	cbz	r2, 8000e5a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e26:	f7ff f9d3 	bl	80001d0 <HAL_GetTick>
 8000e2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e2e:	079b      	lsls	r3, r3, #30
 8000e30:	d50d      	bpl.n	8000e4e <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e3e:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e40:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e42:	9b01      	ldr	r3, [sp, #4]
 8000e44:	1e5a      	subs	r2, r3, #1
 8000e46:	9201      	str	r2, [sp, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f9      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1e0>
 8000e4c:	e724      	b.n	8000c98 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4e:	f7ff f9bf 	bl	80001d0 <HAL_GetTick>
 8000e52:	1b80      	subs	r0, r0, r6
 8000e54:	2802      	cmp	r0, #2
 8000e56:	d9e9      	bls.n	8000e2c <HAL_RCC_OscConfig+0x1cc>
 8000e58:	e767      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 8000e5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e5c:	f7ff f9b8 	bl	80001d0 <HAL_GetTick>
 8000e60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e64:	079f      	lsls	r7, r3, #30
 8000e66:	f57f af17 	bpl.w	8000c98 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6a:	f7ff f9b1 	bl	80001d0 <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x202>
 8000e74:	e759      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000e76:	68e3      	ldr	r3, [r4, #12]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d906      	bls.n	8000e8a <HAL_RCC_OscConfig+0x22a>
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d004      	beq.n	8000e8a <HAL_RCC_OscConfig+0x22a>
 8000e80:	f240 211b 	movw	r1, #539	; 0x21b
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <HAL_RCC_OscConfig+0x2a4>)
 8000e86:	f000 fd96 	bl	80019b6 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8a:	4d1f      	ldr	r5, [pc, #124]	; (8000f08 <HAL_RCC_OscConfig+0x2a8>)
 8000e8c:	69eb      	ldr	r3, [r5, #28]
 8000e8e:	00d8      	lsls	r0, r3, #3
 8000e90:	d424      	bmi.n	8000edc <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8000e92:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	69eb      	ldr	r3, [r5, #28]
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	61eb      	str	r3, [r5, #28]
 8000e9c:	69eb      	ldr	r3, [r5, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea6:	4e1c      	ldr	r6, [pc, #112]	; (8000f18 <HAL_RCC_OscConfig+0x2b8>)
 8000ea8:	6833      	ldr	r3, [r6, #0]
 8000eaa:	05d9      	lsls	r1, r3, #23
 8000eac:	d518      	bpl.n	8000ee0 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d133      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2bc>
 8000eb4:	6a2b      	ldr	r3, [r5, #32]
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ebc:	f7ff f988 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ec4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec6:	6a2b      	ldr	r3, [r5, #32]
 8000ec8:	079b      	lsls	r3, r3, #30
 8000eca:	d54c      	bpl.n	8000f66 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8000ecc:	2f00      	cmp	r7, #0
 8000ece:	f43f aee7 	beq.w	8000ca0 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	69eb      	ldr	r3, [r5, #28]
 8000ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61eb      	str	r3, [r5, #28]
 8000eda:	e6e1      	b.n	8000ca0 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8000edc:	2700      	movs	r7, #0
 8000ede:	e7e2      	b.n	8000ea6 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ee8:	f7ff f972 	bl	80001d0 <HAL_GetTick>
 8000eec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eee:	6833      	ldr	r3, [r6, #0]
 8000ef0:	05da      	lsls	r2, r3, #23
 8000ef2:	d4dc      	bmi.n	8000eae <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef4:	f7ff f96c 	bl	80001d0 <HAL_GetTick>
 8000ef8:	eba0 0008 	sub.w	r0, r0, r8
 8000efc:	2864      	cmp	r0, #100	; 0x64
 8000efe:	d9f6      	bls.n	8000eee <HAL_RCC_OscConfig+0x28e>
 8000f00:	e713      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
 8000f02:	bf00      	nop
 8000f04:	08001fb8 	.word	0x08001fb8
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	42420000 	.word	0x42420000
 8000f10:	42420480 	.word	0x42420480
 8000f14:	20000020 	.word	0x20000020
 8000f18:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1c:	b9ab      	cbnz	r3, 8000f4a <HAL_RCC_OscConfig+0x2ea>
 8000f1e:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	622b      	str	r3, [r5, #32]
 8000f2a:	6a2b      	ldr	r3, [r5, #32]
 8000f2c:	f023 0304 	bic.w	r3, r3, #4
 8000f30:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000f32:	f7ff f94d 	bl	80001d0 <HAL_GetTick>
 8000f36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	6a2b      	ldr	r3, [r5, #32]
 8000f3a:	0798      	lsls	r0, r3, #30
 8000f3c:	d5c6      	bpl.n	8000ecc <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff f947 	bl	80001d0 <HAL_GetTick>
 8000f42:	1b80      	subs	r0, r0, r6
 8000f44:	4540      	cmp	r0, r8
 8000f46:	d9f7      	bls.n	8000f38 <HAL_RCC_OscConfig+0x2d8>
 8000f48:	e6ef      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	6a2b      	ldr	r3, [r5, #32]
 8000f4e:	d103      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2f8>
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	622b      	str	r3, [r5, #32]
 8000f56:	e7ad      	b.n	8000eb4 <HAL_RCC_OscConfig+0x254>
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	622b      	str	r3, [r5, #32]
 8000f5e:	6a2b      	ldr	r3, [r5, #32]
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	e7a9      	b.n	8000eba <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff f933 	bl	80001d0 <HAL_GetTick>
 8000f6a:	eba0 0008 	sub.w	r0, r0, r8
 8000f6e:	42b0      	cmp	r0, r6
 8000f70:	d9a9      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x266>
 8000f72:	e6da      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f74:	4d38      	ldr	r5, [pc, #224]	; (8001058 <HAL_RCC_OscConfig+0x3f8>)
 8000f76:	686b      	ldr	r3, [r5, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	f43f aebd 	beq.w	8000cfc <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f82:	2a02      	cmp	r2, #2
 8000f84:	4e35      	ldr	r6, [pc, #212]	; (800105c <HAL_RCC_OscConfig+0x3fc>)
 8000f86:	d157      	bne.n	8001038 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000f88:	6a23      	ldr	r3, [r4, #32]
 8000f8a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8000f8e:	d004      	beq.n	8000f9a <HAL_RCC_OscConfig+0x33a>
 8000f90:	f240 21c2 	movw	r1, #706	; 0x2c2
 8000f94:	4832      	ldr	r0, [pc, #200]	; (8001060 <HAL_RCC_OscConfig+0x400>)
 8000f96:	f000 fd0e 	bl	80019b6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8000f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f9c:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8000fa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000fa4:	d010      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x368>
 8000fa6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000faa:	d00d      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x368>
 8000fac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x368>
 8000fb2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000fb6:	d007      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x368>
 8000fb8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000fbc:	d004      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x368>
 8000fbe:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000fc2:	4827      	ldr	r0, [pc, #156]	; (8001060 <HAL_RCC_OscConfig+0x400>)
 8000fc4:	f000 fcf7 	bl	80019b6 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fcc:	f7ff f900 	bl	80001d0 <HAL_GetTick>
 8000fd0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd2:	682b      	ldr	r3, [r5, #0]
 8000fd4:	0199      	lsls	r1, r3, #6
 8000fd6:	d429      	bmi.n	800102c <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd8:	6a23      	ldr	r3, [r4, #32]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d10e      	bne.n	8000ffe <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8000fe6:	d004      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x392>
 8000fe8:	f240 21d9 	movw	r1, #729	; 0x2d9
 8000fec:	481c      	ldr	r0, [pc, #112]	; (8001060 <HAL_RCC_OscConfig+0x400>)
 8000fee:	f000 fce2 	bl	80019b6 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff2:	686b      	ldr	r3, [r5, #4]
 8000ff4:	68a2      	ldr	r2, [r4, #8]
 8000ff6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffe:	6a23      	ldr	r3, [r4, #32]
 8001000:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001002:	686a      	ldr	r2, [r5, #4]
 8001004:	430b      	orrs	r3, r1
 8001006:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800100a:	4313      	orrs	r3, r2
 800100c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800100e:	2301      	movs	r3, #1
 8001010:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001012:	f7ff f8dd 	bl	80001d0 <HAL_GetTick>
 8001016:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	019a      	lsls	r2, r3, #6
 800101c:	f53f ae4c 	bmi.w	8000cb8 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff f8d6 	bl	80001d0 <HAL_GetTick>
 8001024:	1b00      	subs	r0, r0, r4
 8001026:	2802      	cmp	r0, #2
 8001028:	d9f6      	bls.n	8001018 <HAL_RCC_OscConfig+0x3b8>
 800102a:	e67e      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff f8d0 	bl	80001d0 <HAL_GetTick>
 8001030:	1bc0      	subs	r0, r0, r7
 8001032:	2802      	cmp	r0, #2
 8001034:	d9cd      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x372>
 8001036:	e678      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800103c:	f7ff f8c8 	bl	80001d0 <HAL_GetTick>
 8001040:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	f57f ae37 	bpl.w	8000cb8 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff f8c1 	bl	80001d0 <HAL_GetTick>
 800104e:	1b00      	subs	r0, r0, r4
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f6      	bls.n	8001042 <HAL_RCC_OscConfig+0x3e2>
 8001054:	e669      	b.n	8000d2a <HAL_RCC_OscConfig+0xca>
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	42420060 	.word	0x42420060
 8001060:	08001fb8 	.word	0x08001fb8

08001064 <HAL_RCC_GetSysClockFreq>:
{
 8001064:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001068:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800106a:	ac02      	add	r4, sp, #8
 800106c:	f103 0510 	add.w	r5, r3, #16
 8001070:	4622      	mov	r2, r4
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	6859      	ldr	r1, [r3, #4]
 8001076:	3308      	adds	r3, #8
 8001078:	c203      	stmia	r2!, {r0, r1}
 800107a:	42ab      	cmp	r3, r5
 800107c:	4614      	mov	r4, r2
 800107e:	d1f7      	bne.n	8001070 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001080:	2301      	movs	r3, #1
 8001082:	f88d 3004 	strb.w	r3, [sp, #4]
 8001086:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001088:	4911      	ldr	r1, [pc, #68]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800108a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800108e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001090:	f003 020c 	and.w	r2, r3, #12
 8001094:	2a08      	cmp	r2, #8
 8001096:	d117      	bne.n	80010c8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001098:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800109c:	a806      	add	r0, sp, #24
 800109e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010a2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a6:	d50c      	bpl.n	80010c2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010b2:	aa06      	add	r2, sp, #24
 80010b4:	4413      	add	r3, r2
 80010b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ba:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010be:	b007      	add	sp, #28
 80010c0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_RCC_GetSysClockFreq+0x74>)
 80010c4:	4350      	muls	r0, r2
 80010c6:	e7fa      	b.n	80010be <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010ca:	e7f8      	b.n	80010be <HAL_RCC_GetSysClockFreq+0x5a>
 80010cc:	08001efc 	.word	0x08001efc
 80010d0:	40021000 	.word	0x40021000
 80010d4:	007a1200 	.word	0x007a1200
 80010d8:	003d0900 	.word	0x003d0900

080010dc <HAL_RCC_ClockConfig>:
{
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80010e2:	4604      	mov	r4, r0
 80010e4:	b920      	cbnz	r0, 80010f0 <HAL_RCC_ClockConfig+0x14>
 80010e6:	f240 312e 	movw	r1, #814	; 0x32e
 80010ea:	487f      	ldr	r0, [pc, #508]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 80010ec:	f000 fc63 	bl	80019b6 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	071d      	lsls	r5, r3, #28
 80010f4:	d104      	bne.n	8001100 <HAL_RCC_ClockConfig+0x24>
 80010f6:	f240 312f 	movw	r1, #815	; 0x32f
 80010fa:	487b      	ldr	r0, [pc, #492]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 80010fc:	f000 fc5b 	bl	80019b6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001100:	2e02      	cmp	r6, #2
 8001102:	d904      	bls.n	800110e <HAL_RCC_ClockConfig+0x32>
 8001104:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001108:	4877      	ldr	r0, [pc, #476]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 800110a:	f000 fc54 	bl	80019b6 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800110e:	4a77      	ldr	r2, [pc, #476]	; (80012ec <HAL_RCC_ClockConfig+0x210>)
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	429e      	cmp	r6, r3
 8001118:	d83d      	bhi.n	8001196 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	0798      	lsls	r0, r3, #30
 800111e:	d447      	bmi.n	80011b0 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	07da      	lsls	r2, r3, #31
 8001124:	d470      	bmi.n	8001208 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001126:	4a71      	ldr	r2, [pc, #452]	; (80012ec <HAL_RCC_ClockConfig+0x210>)
 8001128:	6813      	ldr	r3, [r2, #0]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	429e      	cmp	r6, r3
 8001130:	f0c0 80b5 	bcc.w	800129e <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	4d6e      	ldr	r5, [pc, #440]	; (80012f0 <HAL_RCC_ClockConfig+0x214>)
 8001138:	f013 0f04 	tst.w	r3, #4
 800113c:	f040 80bb 	bne.w	80012b6 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	071b      	lsls	r3, r3, #28
 8001144:	d517      	bpl.n	8001176 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001146:	6923      	ldr	r3, [r4, #16]
 8001148:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_ClockConfig+0x8c>
 800114e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001152:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001156:	d007      	beq.n	8001168 <HAL_RCC_ClockConfig+0x8c>
 8001158:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800115c:	d004      	beq.n	8001168 <HAL_RCC_ClockConfig+0x8c>
 800115e:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8001162:	4861      	ldr	r0, [pc, #388]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 8001164:	f000 fc27 	bl	80019b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001168:	686b      	ldr	r3, [r5, #4]
 800116a:	6922      	ldr	r2, [r4, #16]
 800116c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001170:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001174:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001176:	f7ff ff75 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 800117a:	686b      	ldr	r3, [r5, #4]
 800117c:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <HAL_RCC_ClockConfig+0x218>)
 800117e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001182:	5cd3      	ldrb	r3, [r2, r3]
 8001184:	40d8      	lsrs	r0, r3
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_RCC_ClockConfig+0x21c>)
 8001188:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f7fe ffde 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
}
 8001192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	f023 0307 	bic.w	r3, r3, #7
 800119c:	4333      	orrs	r3, r6
 800119e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d0b7      	beq.n	800111a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b0:	4d4f      	ldr	r5, [pc, #316]	; (80012f0 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b2:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b6:	bf1e      	ittt	ne
 80011b8:	686a      	ldrne	r2, [r5, #4]
 80011ba:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80011be:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c2:	bf42      	ittt	mi
 80011c4:	686b      	ldrmi	r3, [r5, #4]
 80011c6:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 80011ca:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80011cc:	68a3      	ldr	r3, [r4, #8]
 80011ce:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80011d2:	d012      	beq.n	80011fa <HAL_RCC_ClockConfig+0x11e>
 80011d4:	f023 0220 	bic.w	r2, r3, #32
 80011d8:	2a90      	cmp	r2, #144	; 0x90
 80011da:	d00e      	beq.n	80011fa <HAL_RCC_ClockConfig+0x11e>
 80011dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011e0:	2aa0      	cmp	r2, #160	; 0xa0
 80011e2:	d00a      	beq.n	80011fa <HAL_RCC_ClockConfig+0x11e>
 80011e4:	f023 0210 	bic.w	r2, r3, #16
 80011e8:	2ac0      	cmp	r2, #192	; 0xc0
 80011ea:	d006      	beq.n	80011fa <HAL_RCC_ClockConfig+0x11e>
 80011ec:	2bf0      	cmp	r3, #240	; 0xf0
 80011ee:	d004      	beq.n	80011fa <HAL_RCC_ClockConfig+0x11e>
 80011f0:	f240 3156 	movw	r1, #854	; 0x356
 80011f4:	483c      	ldr	r0, [pc, #240]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 80011f6:	f000 fbde 	bl	80019b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fa:	686b      	ldr	r3, [r5, #4]
 80011fc:	68a2      	ldr	r2, [r4, #8]
 80011fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001202:	4313      	orrs	r3, r2
 8001204:	606b      	str	r3, [r5, #4]
 8001206:	e78b      	b.n	8001120 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d904      	bls.n	8001218 <HAL_RCC_ClockConfig+0x13c>
 800120e:	f240 315d 	movw	r1, #861	; 0x35d
 8001212:	4835      	ldr	r0, [pc, #212]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 8001214:	f000 fbcf 	bl	80019b6 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001218:	6862      	ldr	r2, [r4, #4]
 800121a:	4d35      	ldr	r5, [pc, #212]	; (80012f0 <HAL_RCC_ClockConfig+0x214>)
 800121c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001220:	d11d      	bne.n	800125e <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	d0c0      	beq.n	80011aa <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001228:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	4313      	orrs	r3, r2
 8001234:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001236:	f7fe ffcb 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800123c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123e:	2b01      	cmp	r3, #1
 8001240:	d115      	bne.n	800126e <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001242:	686b      	ldr	r3, [r5, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b04      	cmp	r3, #4
 800124a:	f43f af6c 	beq.w	8001126 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124e:	f7fe ffbf 	bl	80001d0 <HAL_GetTick>
 8001252:	1bc0      	subs	r0, r0, r7
 8001254:	4540      	cmp	r0, r8
 8001256:	d9f4      	bls.n	8001242 <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125e:	2a02      	cmp	r2, #2
 8001260:	d102      	bne.n	8001268 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001266:	e7de      	b.n	8001226 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	f013 0f02 	tst.w	r3, #2
 800126c:	e7db      	b.n	8001226 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126e:	2b02      	cmp	r3, #2
 8001270:	d110      	bne.n	8001294 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001272:	686b      	ldr	r3, [r5, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	f43f af54 	beq.w	8001126 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f7fe ffa7 	bl	80001d0 <HAL_GetTick>
 8001282:	1bc0      	subs	r0, r0, r7
 8001284:	4540      	cmp	r0, r8
 8001286:	d9f4      	bls.n	8001272 <HAL_RCC_ClockConfig+0x196>
 8001288:	e7e6      	b.n	8001258 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128a:	f7fe ffa1 	bl	80001d0 <HAL_GetTick>
 800128e:	1bc0      	subs	r0, r0, r7
 8001290:	4540      	cmp	r0, r8
 8001292:	d8e1      	bhi.n	8001258 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001294:	686b      	ldr	r3, [r5, #4]
 8001296:	f013 0f0c 	tst.w	r3, #12
 800129a:	d1f6      	bne.n	800128a <HAL_RCC_ClockConfig+0x1ae>
 800129c:	e743      	b.n	8001126 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f023 0307 	bic.w	r3, r3, #7
 80012a4:	4333      	orrs	r3, r6
 80012a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a8:	6813      	ldr	r3, [r2, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	429e      	cmp	r6, r3
 80012b0:	f47f af7b 	bne.w	80011aa <HAL_RCC_ClockConfig+0xce>
 80012b4:	e73e      	b.n	8001134 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x1fc>
 80012be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012c2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80012c6:	d007      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x1fc>
 80012c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80012cc:	d004      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x1fc>
 80012ce:	f240 31b1 	movw	r1, #945	; 0x3b1
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_RCC_ClockConfig+0x20c>)
 80012d4:	f000 fb6f 	bl	80019b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	686b      	ldr	r3, [r5, #4]
 80012da:	68e2      	ldr	r2, [r4, #12]
 80012dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e0:	4313      	orrs	r3, r2
 80012e2:	606b      	str	r3, [r5, #4]
 80012e4:	e72c      	b.n	8001140 <HAL_RCC_ClockConfig+0x64>
 80012e6:	bf00      	nop
 80012e8:	08001fb8 	.word	0x08001fb8
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08002d95 	.word	0x08002d95
 80012f8:	20000020 	.word	0x20000020

080012fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x14>)
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800130a:	6810      	ldr	r0, [r2, #0]
}    
 800130c:	40d8      	lsrs	r0, r3
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000
 8001314:	08002da5 	.word	0x08002da5
 8001318:	20000020 	.word	0x20000020

0800131c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_RCC_GetPCLK2Freq+0x14>)
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800132a:	6810      	ldr	r0, [r2, #0]
} 
 800132c:	40d8      	lsrs	r0, r3
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	08002da5 	.word	0x08002da5
 8001338:	20000020 	.word	0x20000020

0800133c <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800133c:	6842      	ldr	r2, [r0, #4]
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <UART_SetConfig+0x198>)
{
 8001340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001344:	429a      	cmp	r2, r3
{
 8001346:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001348:	d904      	bls.n	8001354 <UART_SetConfig+0x18>
 800134a:	f640 11a7 	movw	r1, #2471	; 0x9a7
 800134e:	4862      	ldr	r0, [pc, #392]	; (80014d8 <UART_SetConfig+0x19c>)
 8001350:	f000 fb31 	bl	80019b6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001354:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001358:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800135c:	d004      	beq.n	8001368 <UART_SetConfig+0x2c>
 800135e:	f640 11a8 	movw	r1, #2472	; 0x9a8
 8001362:	485d      	ldr	r0, [pc, #372]	; (80014d8 <UART_SetConfig+0x19c>)
 8001364:	f000 fb27 	bl	80019b6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8001368:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800136c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001370:	d007      	beq.n	8001382 <UART_SetConfig+0x46>
 8001372:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001376:	d004      	beq.n	8001382 <UART_SetConfig+0x46>
 8001378:	f640 11a9 	movw	r1, #2473	; 0x9a9
 800137c:	4856      	ldr	r0, [pc, #344]	; (80014d8 <UART_SetConfig+0x19c>)
 800137e:	f000 fb1a 	bl	80019b6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8001382:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8001386:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800138a:	4213      	tst	r3, r2
 800138c:	d100      	bne.n	8001390 <UART_SetConfig+0x54>
 800138e:	b923      	cbnz	r3, 800139a <UART_SetConfig+0x5e>
 8001390:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8001394:	4850      	ldr	r0, [pc, #320]	; (80014d8 <UART_SetConfig+0x19c>)
 8001396:	f000 fb0e 	bl	80019b6 <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800139a:	f8d9 5000 	ldr.w	r5, [r9]
 800139e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80013a2:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013a4:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ac:	4313      	orrs	r3, r2
 80013ae:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80013b4:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013b6:	430b      	orrs	r3, r1
 80013b8:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80013bc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80013c0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013c4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013ca:	696b      	ldr	r3, [r5, #20]
 80013cc:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80013d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d4:	4313      	orrs	r3, r2
 80013d6:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <UART_SetConfig+0x1a0>)
 80013da:	2419      	movs	r4, #25
 80013dc:	429d      	cmp	r5, r3
 80013de:	d146      	bne.n	800146e <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013e0:	f7ff ff9c 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 80013e4:	fb04 f300 	mul.w	r3, r4, r0
 80013e8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80013ec:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013f0:	00b6      	lsls	r6, r6, #2
 80013f2:	fbb3 f3f6 	udiv	r3, r3, r6
 80013f6:	fbb3 f3f8 	udiv	r3, r3, r8
 80013fa:	011e      	lsls	r6, r3, #4
 80013fc:	f7ff ff8e 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8001400:	4360      	muls	r0, r4
 8001402:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fbb0 f7f3 	udiv	r7, r0, r3
 800140c:	f7ff ff86 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8001410:	4360      	muls	r0, r4
 8001412:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001420:	fb08 7313 	mls	r3, r8, r3, r7
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	3332      	adds	r3, #50	; 0x32
 8001428:	fbb3 f3f8 	udiv	r3, r3, r8
 800142c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001430:	f7ff ff74 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8001434:	4360      	muls	r0, r4
 8001436:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	fbb0 faf2 	udiv	sl, r0, r2
 8001440:	f7ff ff6c 	bl	800131c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001444:	4360      	muls	r0, r4
 8001446:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001450:	fbb3 f3f8 	udiv	r3, r3, r8
 8001454:	fb08 a313 	mls	r3, r8, r3, sl
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	3332      	adds	r3, #50	; 0x32
 800145c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	433b      	orrs	r3, r7
 8001466:	4433      	add	r3, r6
 8001468:	60ab      	str	r3, [r5, #8]
 800146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146e:	f7ff ff45 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 8001472:	fb04 f300 	mul.w	r3, r4, r0
 8001476:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800147a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800147e:	00b6      	lsls	r6, r6, #2
 8001480:	fbb3 f3f6 	udiv	r3, r3, r6
 8001484:	fbb3 f3f8 	udiv	r3, r3, r8
 8001488:	011e      	lsls	r6, r3, #4
 800148a:	f7ff ff37 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 800148e:	4360      	muls	r0, r4
 8001490:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fbb0 f7f3 	udiv	r7, r0, r3
 800149a:	f7ff ff2f 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 800149e:	4360      	muls	r0, r4
 80014a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80014ae:	fb08 7313 	mls	r3, r8, r3, r7
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	3332      	adds	r3, #50	; 0x32
 80014b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80014ba:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80014be:	f7ff ff1d 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 80014c2:	4360      	muls	r0, r4
 80014c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	fbb0 faf2 	udiv	sl, r0, r2
 80014ce:	f7ff ff15 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 80014d2:	e7b7      	b.n	8001444 <UART_SetConfig+0x108>
 80014d4:	0044aa20 	.word	0x0044aa20
 80014d8:	08001ff0 	.word	0x08001ff0
 80014dc:	40013800 	.word	0x40013800

080014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	4604      	mov	r4, r0
 80014e4:	460e      	mov	r6, r1
 80014e6:	4617      	mov	r7, r2
 80014e8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80014ea:	6821      	ldr	r1, [r4, #0]
 80014ec:	680b      	ldr	r3, [r1, #0]
 80014ee:	ea36 0303 	bics.w	r3, r6, r3
 80014f2:	d101      	bne.n	80014f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
}
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014f8:	1c6b      	adds	r3, r5, #1
 80014fa:	d0f7      	beq.n	80014ec <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014fc:	b995      	cbnz	r5, 8001524 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014fe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001500:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001508:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001512:	2320      	movs	r3, #32
 8001514:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001518:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800151c:	2300      	movs	r3, #0
 800151e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001524:	f7fe fe54 	bl	80001d0 <HAL_GetTick>
 8001528:	1bc0      	subs	r0, r0, r7
 800152a:	4285      	cmp	r5, r0
 800152c:	d2dd      	bcs.n	80014ea <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800152e:	e7e6      	b.n	80014fe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001530 <HAL_UART_Init>:
{
 8001530:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	2800      	cmp	r0, #0
 8001536:	d05b      	beq.n	80015f0 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001538:	6981      	ldr	r1, [r0, #24]
 800153a:	6803      	ldr	r3, [r0, #0]
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <HAL_UART_Init+0xc4>)
 800153e:	2900      	cmp	r1, #0
 8001540:	d04a      	beq.n	80015d8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001542:	4293      	cmp	r3, r2
 8001544:	d00c      	beq.n	8001560 <HAL_UART_Init+0x30>
 8001546:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800154a:	4293      	cmp	r3, r2
 800154c:	d008      	beq.n	8001560 <HAL_UART_Init+0x30>
 800154e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001552:	4293      	cmp	r3, r2
 8001554:	d004      	beq.n	8001560 <HAL_UART_Init+0x30>
 8001556:	f240 110f 	movw	r1, #271	; 0x10f
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <HAL_UART_Init+0xc8>)
 800155c:	f000 fa2b 	bl	80019b6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001560:	69a3      	ldr	r3, [r4, #24]
 8001562:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001566:	d004      	beq.n	8001572 <HAL_UART_Init+0x42>
 8001568:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800156c:	4822      	ldr	r0, [pc, #136]	; (80015f8 <HAL_UART_Init+0xc8>)
 800156e:	f000 fa22 	bl	80019b6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001572:	68a3      	ldr	r3, [r4, #8]
 8001574:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001578:	d004      	beq.n	8001584 <HAL_UART_Init+0x54>
 800157a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800157e:	481e      	ldr	r0, [pc, #120]	; (80015f8 <HAL_UART_Init+0xc8>)
 8001580:	f000 fa19 	bl	80019b6 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001584:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800158c:	b923      	cbnz	r3, 8001598 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 800158e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001592:	4620      	mov	r0, r4
 8001594:	f000 fc10 	bl	8001db8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001598:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800159a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800159c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015a0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80015a2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80015a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015a8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015aa:	f7ff fec7 	bl	800133c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ae:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015c0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80015ca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015d6:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80015d8:	4293      	cmp	r3, r2
 80015da:	d0ca      	beq.n	8001572 <HAL_UART_Init+0x42>
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_UART_Init+0xcc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d0c7      	beq.n	8001572 <HAL_UART_Init+0x42>
 80015e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d0c3      	beq.n	8001572 <HAL_UART_Init+0x42>
 80015ea:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015ee:	e7bd      	b.n	800156c <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	bd10      	pop	{r4, pc}
 80015f4:	40013800 	.word	0x40013800
 80015f8:	08001ff0 	.word	0x08001ff0
 80015fc:	40004400 	.word	0x40004400

08001600 <HAL_UART_Transmit>:
{
 8001600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001604:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001606:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800160a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800160c:	2b20      	cmp	r3, #32
{
 800160e:	460d      	mov	r5, r1
 8001610:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001612:	d14e      	bne.n	80016b2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001614:	2900      	cmp	r1, #0
 8001616:	d049      	beq.n	80016ac <HAL_UART_Transmit+0xac>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d047      	beq.n	80016ac <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800161c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001620:	2b01      	cmp	r3, #1
 8001622:	d046      	beq.n	80016b2 <HAL_UART_Transmit+0xb2>
 8001624:	2301      	movs	r3, #1
 8001626:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800162e:	2321      	movs	r3, #33	; 0x21
 8001630:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001634:	f7fe fdcc 	bl	80001d0 <HAL_GetTick>
 8001638:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800163a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800163e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001642:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001644:	b29b      	uxth	r3, r3
 8001646:	b96b      	cbnz	r3, 8001664 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4632      	mov	r2, r6
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff ff46 	bl	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001654:	b9a8      	cbnz	r0, 8001682 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001656:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001658:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800165c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001664:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001666:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001668:	3b01      	subs	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800166e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001670:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001676:	4620      	mov	r0, r4
 8001678:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800167a:	d10e      	bne.n	800169a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800167c:	f7ff ff30 	bl	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001680:	b110      	cbz	r0, 8001688 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001682:	2003      	movs	r0, #3
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001688:	882b      	ldrh	r3, [r5, #0]
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001690:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	b943      	cbnz	r3, 80016a8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001696:	3502      	adds	r5, #2
 8001698:	e7d3      	b.n	8001642 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169a:	f7ff ff21 	bl	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d1ef      	bne.n	8001682 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	782a      	ldrb	r2, [r5, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	3501      	adds	r5, #1
 80016aa:	e7ca      	b.n	8001642 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80016b2:	2002      	movs	r0, #2
}
 80016b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016b8 <HAL_UART_Receive>:
{
 80016b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016bc:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80016be:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80016c2:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80016c4:	2b20      	cmp	r3, #32
{
 80016c6:	460d      	mov	r5, r1
 80016c8:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80016ca:	d151      	bne.n	8001770 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 80016cc:	2900      	cmp	r1, #0
 80016ce:	d04c      	beq.n	800176a <HAL_UART_Receive+0xb2>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d04a      	beq.n	800176a <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80016d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d049      	beq.n	8001770 <HAL_UART_Receive+0xb8>
 80016dc:	2301      	movs	r3, #1
 80016de:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016e6:	2322      	movs	r3, #34	; 0x22
 80016e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80016ec:	f7fe fd70 	bl	80001d0 <HAL_GetTick>
 80016f0:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80016f2:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016f6:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80016fa:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80016fc:	b280      	uxth	r0, r0
 80016fe:	b930      	cbnz	r0, 800170e <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001700:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001702:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8001706:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 800170e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001710:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001718:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800171a:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800171c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001720:	4620      	mov	r0, r4
 8001722:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001724:	d112      	bne.n	800174c <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001726:	f7ff fedb 	bl	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800172a:	b110      	cbz	r0, 8001732 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 800172c:	2003      	movs	r0, #3
 800172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001732:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001734:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001736:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001738:	b922      	cbnz	r2, 8001744 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800173a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173e:	f825 3b02 	strh.w	r3, [r5], #2
 8001742:	e7da      	b.n	80016fa <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f825 3b01 	strh.w	r3, [r5], #1
 800174a:	e7d6      	b.n	80016fa <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800174c:	f7ff fec8 	bl	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001750:	2800      	cmp	r0, #0
 8001752:	d1eb      	bne.n	800172c <HAL_UART_Receive+0x74>
 8001754:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001756:	6921      	ldr	r1, [r4, #16]
 8001758:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800175a:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800175c:	b911      	cbnz	r1, 8001764 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800175e:	702b      	strb	r3, [r5, #0]
 8001760:	4615      	mov	r5, r2
 8001762:	e7ca      	b.n	80016fa <HAL_UART_Receive+0x42>
 8001764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001768:	e7f9      	b.n	800175e <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001770:	2002      	movs	r0, #2
}
 8001772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001778 <toggle_led_light_on>:
void confirm_master_connected()
{
}

void toggle_led_light_on()
{
 8001778:	b510      	push	{r4, lr}
    HAL_UART_Receive(&huart1, &generic_buffer, sizeof(generic_buffer), HAL_MAX_DELAY);
 800177a:	4c0e      	ldr	r4, [pc, #56]	; (80017b4 <toggle_led_light_on+0x3c>)
 800177c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001780:	2203      	movs	r2, #3
 8001782:	4621      	mov	r1, r4
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <toggle_led_light_on+0x40>)
 8001786:	f7ff ff97 	bl	80016b8 <HAL_UART_Receive>
    if (generic_buffer[0] == 'y')
 800178a:	7823      	ldrb	r3, [r4, #0]
 800178c:	2b79      	cmp	r3, #121	; 0x79
 800178e:	d110      	bne.n	80017b2 <toggle_led_light_on+0x3a>
    {
        HAL_UART_Transmit(&huart1, &on, sizeof(on), HAL_MAX_DELAY);
 8001790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001794:	2206      	movs	r2, #6
 8001796:	4909      	ldr	r1, [pc, #36]	; (80017bc <toggle_led_light_on+0x44>)
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <toggle_led_light_on+0x40>)
 800179a:	f7ff ff31 	bl	8001600 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); //Toggle the state of pin P13 ( onboard LED pin for bluepill)
 800179e:	2102      	movs	r1, #2
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <toggle_led_light_on+0x48>)
 80017a2:	f7fe ff17 	bl	80005d4 <HAL_GPIO_TogglePin>
        // HAL_Delay(500);
        strcpy(generic_buffer, "");
 80017a6:	4620      	mov	r0, r4
    }
}
 80017a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        strcpy(generic_buffer, "");
 80017ac:	4905      	ldr	r1, [pc, #20]	; (80017c4 <toggle_led_light_on+0x4c>)
 80017ae:	f000 bb91 	b.w	8001ed4 <strcpy>
 80017b2:	bd10      	pop	{r4, pc}
 80017b4:	2000044c 	.word	0x2000044c
 80017b8:	200004a4 	.word	0x200004a4
 80017bc:	2000000f 	.word	0x2000000f
 80017c0:	40010800 	.word	0x40010800
 80017c4:	08002d94 	.word	0x08002d94

080017c8 <toggle_led_light_off>:

void toggle_led_light_off()
{
 80017c8:	b510      	push	{r4, lr}
    if (generic_buffer[0] == 'n')
 80017ca:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <toggle_led_light_off+0x30>)
 80017cc:	7823      	ldrb	r3, [r4, #0]
 80017ce:	2b6e      	cmp	r3, #110	; 0x6e
 80017d0:	d110      	bne.n	80017f4 <toggle_led_light_off+0x2c>
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80017d2:	2102      	movs	r1, #2
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <toggle_led_light_off+0x34>)
 80017d6:	f7fe fefd 	bl	80005d4 <HAL_GPIO_TogglePin>
        HAL_UART_Transmit(&huart1, &off, sizeof(off), HAL_MAX_DELAY);
 80017da:	4909      	ldr	r1, [pc, #36]	; (8001800 <toggle_led_light_off+0x38>)
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e0:	2207      	movs	r2, #7
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <toggle_led_light_off+0x3c>)
 80017e4:	f7ff ff0c 	bl	8001600 <HAL_UART_Transmit>
        strcpy(generic_buffer, "");
 80017e8:	4620      	mov	r0, r4
    }
}
 80017ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        strcpy(generic_buffer, "");
 80017ee:	4906      	ldr	r1, [pc, #24]	; (8001808 <toggle_led_light_off+0x40>)
 80017f0:	f000 bb70 	b.w	8001ed4 <strcpy>
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	bf00      	nop
 80017f8:	2000044c 	.word	0x2000044c
 80017fc:	40010800 	.word	0x40010800
 8001800:	20000008 	.word	0x20000008
 8001804:	200004a4 	.word	0x200004a4
 8001808:	08002d94 	.word	0x08002d94

0800180c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	2210      	movs	r2, #16
 8001812:	2100      	movs	r1, #0
 8001814:	a802      	add	r0, sp, #8
 8001816:	f000 fb55 	bl	8001ec4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800181c:	4c13      	ldr	r4, [pc, #76]	; (800186c <MX_GPIO_Init+0x60>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001820:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	f042 0204 	orr.w	r2, r2, #4
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800182a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	f002 0204 	and.w	r2, r2, #4
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001848:	f7fe feaa 	bl	80005a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800184e:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2200      	movs	r2, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	a902      	add	r1, sp, #8
 8001856:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001858:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f7fe fd33 	bl	80002c8 <HAL_GPIO_Init>

}
 8001862:	b006      	add	sp, #24
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40010800 	.word	0x40010800

08001870 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001870:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_I2C1_Init+0x38>)
 8001876:	f8df e034 	ldr.w	lr, [pc, #52]	; 80018ac <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 800187e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001882:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001886:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001888:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001892:	f7fe ff7f 	bl	8000794 <HAL_I2C_Init>
 8001896:	b118      	cbz	r0, 80018a0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800189c:	f000 b88a 	b.w	80019b4 <Error_Handler>
 80018a0:	bd08      	pop	{r3, pc}
 80018a2:	bf00      	nop
 80018a4:	20000450 	.word	0x20000450
 80018a8:	40005400 	.word	0x40005400
 80018ac:	00061a80 	.word	0x00061a80

080018b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	4604      	mov	r4, r0
 80018b4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	2210      	movs	r2, #16
 80018b8:	2100      	movs	r1, #0
 80018ba:	a802      	add	r0, sp, #8
 80018bc:	f000 fb02 	bl	8001ec4 <memset>
  if(i2cHandle->Instance==I2C1)
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_I2C_MspInit+0x58>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d11c      	bne.n	8001902 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4c10      	ldr	r4, [pc, #64]	; (800190c <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	4810      	ldr	r0, [pc, #64]	; (8001910 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	61a3      	str	r3, [r4, #24]
 80018d6:	69a3      	ldr	r3, [r4, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e0:	23c0      	movs	r3, #192	; 0xc0
 80018e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e4:	2312      	movs	r3, #18
 80018e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f7fe fcec 	bl	80002c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f0:	69e3      	ldr	r3, [r4, #28]
 80018f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f6:	61e3      	str	r3, [r4, #28]
 80018f8:	69e3      	ldr	r3, [r4, #28]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001902:	b006      	add	sp, #24
 8001904:	bd10      	pop	{r4, pc}
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40021000 	.word	0x40021000
 8001910:	40010c00 	.word	0x40010c00

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b500      	push	{lr}
 8001916:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001918:	2228      	movs	r2, #40	; 0x28
 800191a:	2100      	movs	r1, #0
 800191c:	a806      	add	r0, sp, #24
 800191e:	f000 fad1 	bl	8001ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001922:	2214      	movs	r2, #20
 8001924:	2100      	movs	r1, #0
 8001926:	a801      	add	r0, sp, #4
 8001928:	f000 facc 	bl	8001ec4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800192c:	2302      	movs	r3, #2
 800192e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001930:	2301      	movs	r3, #1
 8001932:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001934:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001936:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193a:	f7ff f991 	bl	8000c60 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800193e:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001942:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001946:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800194a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194c:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800194e:	f7ff fbc5 	bl	80010dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001952:	b011      	add	sp, #68	; 0x44
 8001954:	f85d fb04 	ldr.w	pc, [sp], #4

08001958 <main>:
{
 8001958:	b508      	push	{r3, lr}
  HAL_Init();
 800195a:	f7fe fc1b 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800195e:	f7ff ffd9 	bl	8001914 <SystemClock_Config>
  MX_GPIO_Init();
 8001962:	f7ff ff53 	bl	800180c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001966:	f000 fa0b 	bl	8001d80 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800196a:	f7ff ff81 	bl	8001870 <MX_I2C1_Init>
SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello 
 800196e:	4c0e      	ldr	r4, [pc, #56]	; (80019a8 <main+0x50>)
SSD1306_Init (); // initialize the diaply 
 8001970:	f000 f906 	bl	8001b80 <SSD1306_Init>
SSD1306_GotoXY (10,10); // goto 10, 10 
 8001974:	210a      	movs	r1, #10
 8001976:	4608      	mov	r0, r1
 8001978:	f000 f84e 	bl	8001a18 <SSD1306_GotoXY>
SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello 
 800197c:	2201      	movs	r2, #1
 800197e:	4621      	mov	r1, r4
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <main+0x54>)
 8001982:	f000 f89b 	bl	8001abc <SSD1306_Puts>
SSD1306_GotoXY (10, 30); 
 8001986:	211e      	movs	r1, #30
 8001988:	200a      	movs	r0, #10
 800198a:	f000 f845 	bl	8001a18 <SSD1306_GotoXY>
SSD1306_Puts ("WORLD !!", &Font_11x18, 1); 
 800198e:	2201      	movs	r2, #1
 8001990:	4621      	mov	r1, r4
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <main+0x58>)
 8001994:	f000 f892 	bl	8001abc <SSD1306_Puts>
SSD1306_UpdateScreen(); // update screen
 8001998:	f000 f8d0 	bl	8001b3c <SSD1306_UpdateScreen>
     toggle_led_light_off();
 800199c:	f7ff ff14 	bl	80017c8 <toggle_led_light_off>
     toggle_led_light_on();
 80019a0:	f7ff feea 	bl	8001778 <toggle_led_light_on>
 80019a4:	e7e4      	b.n	8001970 <main+0x18>
 80019a6:	bf00      	nop
 80019a8:	20000018 	.word	0x20000018
 80019ac:	08002d86 	.word	0x08002d86
 80019b0:	08002d8c 	.word	0x08002d8c

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	4770      	bx	lr

080019b6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80019b6:	4770      	bx	lr

080019b8 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019b8:	2800      	cmp	r0, #0
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	bf14      	ite	ne
 80019c0:	21ff      	movne	r1, #255	; 0xff
 80019c2:	2100      	moveq	r1, #0
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <SSD1306_Fill+0x14>)
 80019c6:	f000 ba7d 	b.w	8001ec4 <memset>
 80019ca:	bf00      	nop
 80019cc:	20000046 	.word	0x20000046

080019d0 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80019d0:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019d2:	b510      	push	{r4, lr}
	if (
 80019d4:	d81a      	bhi.n	8001a0c <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 80019d6:	293f      	cmp	r1, #63	; 0x3f
 80019d8:	d818      	bhi.n	8001a0c <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <SSD1306_DrawPixel+0x40>)
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	b113      	cbz	r3, 80019e6 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	0952      	lsrs	r2, r2, #5
 80019e6:	08cc      	lsrs	r4, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80019e8:	2a01      	cmp	r2, #1
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <SSD1306_DrawPixel+0x44>)
 80019ec:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019f0:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 80019f4:	d104      	bne.n	8001a00 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019f6:	408a      	lsls	r2, r1
 80019f8:	5c19      	ldrb	r1, [r3, r0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	541a      	strb	r2, [r3, r0]
 80019fe:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a00:	2201      	movs	r2, #1
 8001a02:	408a      	lsls	r2, r1
 8001a04:	5c19      	ldrb	r1, [r3, r0]
 8001a06:	ea21 0102 	bic.w	r1, r1, r2
 8001a0a:	5419      	strb	r1, [r3, r0]
 8001a0c:	bd10      	pop	{r4, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000040 	.word	0x20000040
 8001a14:	20000046 	.word	0x20000046

08001a18 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a18:	4b01      	ldr	r3, [pc, #4]	; (8001a20 <SSD1306_GotoXY+0x8>)
 8001a1a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001a1c:	8059      	strh	r1, [r3, #2]
 8001a1e:	4770      	bx	lr
 8001a20:	20000040 	.word	0x20000040

08001a24 <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a28:	4d23      	ldr	r5, [pc, #140]	; (8001ab8 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a2a:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a2c:	882e      	ldrh	r6, [r5, #0]
 8001a2e:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a30:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a32:	4432      	add	r2, r6
	if (
 8001a34:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a36:	4682      	mov	sl, r0
 8001a38:	460c      	mov	r4, r1
	if (
 8001a3a:	dc39      	bgt.n	8001ab0 <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a3c:	886b      	ldrh	r3, [r5, #2]
 8001a3e:	784a      	ldrb	r2, [r1, #1]
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a44:	2a3f      	cmp	r2, #63	; 0x3f
 8001a46:	dc33      	bgt.n	8001ab0 <SSD1306_Putc+0x8c>
 8001a48:	2700      	movs	r7, #0
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a4a:	f1a0 0320 	sub.w	r3, r0, #32
 8001a4e:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8001a50:	7862      	ldrb	r2, [r4, #1]
 8001a52:	4297      	cmp	r7, r2
 8001a54:	d306      	bcc.n	8001a64 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a56:	7822      	ldrb	r2, [r4, #0]
 8001a58:	4416      	add	r6, r2
 8001a5a:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 8001a5c:	4650      	mov	r0, sl
 8001a5e:	b005      	add	sp, #20
 8001a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8001a64:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	6861      	ldr	r1, [r4, #4]
 8001a6c:	fb02 7203 	mla	r2, r2, r3, r7
 8001a70:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	eb03 0907 	add.w	r9, r3, r7
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a7c:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8001a80:	7822      	ldrb	r2, [r4, #0]
 8001a82:	4590      	cmp	r8, r2
 8001a84:	d301      	bcc.n	8001a8a <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a86:	3701      	adds	r7, #1
 8001a88:	e7e2      	b.n	8001a50 <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 8001a8a:	9b02      	ldr	r3, [sp, #8]
 8001a8c:	eb06 0008 	add.w	r0, r6, r8
 8001a90:	fa03 f208 	lsl.w	r2, r3, r8
 8001a94:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a98:	bf0a      	itet	eq
 8001a9a:	fabb f28b 	clzeq	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a9e:	465a      	movne	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001aa0:	0952      	lsreq	r2, r2, #5
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	b280      	uxth	r0, r0
 8001aa6:	f7ff ff93 	bl	80019d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aaa:	f108 0801 	add.w	r8, r8, #1
 8001aae:	e7e7      	b.n	8001a80 <SSD1306_Putc+0x5c>
		return 0;
 8001ab0:	f04f 0a00 	mov.w	sl, #0
 8001ab4:	e7d2      	b.n	8001a5c <SSD1306_Putc+0x38>
 8001ab6:	bf00      	nop
 8001ab8:	20000040 	.word	0x20000040

08001abc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	460d      	mov	r5, r1
 8001ac0:	4616      	mov	r6, r2
 8001ac2:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8001ac4:	7863      	ldrb	r3, [r4, #1]
 8001ac6:	b143      	cbz	r3, 8001ada <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ac8:	4618      	mov	r0, r3
 8001aca:	4632      	mov	r2, r6
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7ff ffa9 	bl	8001a24 <SSD1306_Putc>
 8001ad2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001ad6:	4298      	cmp	r0, r3
 8001ad8:	d0f4      	beq.n	8001ac4 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ae0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ae0:	b530      	push	{r4, r5, lr}
 8001ae2:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8001ae4:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	1c4c      	adds	r4, r1, #1
 8001aec:	b2c9      	uxtb	r1, r1
 8001aee:	4299      	cmp	r1, r3
 8001af0:	d30a      	bcc.n	8001b08 <ssd1306_I2C_WriteMulti+0x28>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001af2:	220a      	movs	r2, #10
 8001af4:	3301      	adds	r3, #1
 8001af6:	9200      	str	r2, [sp, #0]
 8001af8:	4601      	mov	r1, r0
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	aa02      	add	r2, sp, #8
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <ssd1306_I2C_WriteMulti+0x34>)
 8001b00:	f7fe ff28 	bl	8000954 <HAL_I2C_Master_Transmit>
}
 8001b04:	b043      	add	sp, #268	; 0x10c
 8001b06:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8001b08:	ad02      	add	r5, sp, #8
 8001b0a:	440d      	add	r5, r1
 8001b0c:	5c51      	ldrb	r1, [r2, r1]
 8001b0e:	7069      	strb	r1, [r5, #1]
 8001b10:	4621      	mov	r1, r4
 8001b12:	e7ea      	b.n	8001aea <ssd1306_I2C_WriteMulti+0xa>
 8001b14:	20000450 	.word	0x20000450

08001b18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b1a:	230a      	movs	r3, #10
	dt[0] = reg;
 8001b1c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001b20:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4601      	mov	r1, r0
 8001b28:	2302      	movs	r3, #2
 8001b2a:	aa03      	add	r2, sp, #12
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <ssd1306_I2C_Write+0x20>)
 8001b2e:	f7fe ff11 	bl	8000954 <HAL_I2C_Master_Transmit>
}
 8001b32:	b005      	add	sp, #20
 8001b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b38:	20000450 	.word	0x20000450

08001b3c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b40:	4d0e      	ldr	r5, [pc, #56]	; (8001b7c <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b42:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	; 0x78
 8001b4c:	f7ff ffe4 	bl	8001b18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2078      	movs	r0, #120	; 0x78
 8001b54:	4611      	mov	r1, r2
 8001b56:	f7ff ffdf 	bl	8001b18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2078      	movs	r0, #120	; 0x78
 8001b60:	f7ff ffda 	bl	8001b18 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b64:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	2078      	movs	r0, #120	; 0x78
 8001b6e:	3401      	adds	r4, #1
 8001b70:	f7ff ffb6 	bl	8001ae0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b74:	2c08      	cmp	r4, #8
 8001b76:	d1e4      	bne.n	8001b42 <SSD1306_UpdateScreen+0x6>
}
 8001b78:	bd38      	pop	{r3, r4, r5, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000046 	.word	0x20000046

08001b80 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001b80:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b86:	2201      	movs	r2, #1
 8001b88:	2178      	movs	r1, #120	; 0x78
 8001b8a:	4852      	ldr	r0, [pc, #328]	; (8001cd4 <SSD1306_Init+0x154>)
 8001b8c:	f7fe ffb8 	bl	8000b00 <HAL_I2C_IsDeviceReady>
 8001b90:	4604      	mov	r4, r0
 8001b92:	2800      	cmp	r0, #0
 8001b94:	f040 809c 	bne.w	8001cd0 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001b98:	4601      	mov	r1, r0
 8001b9a:	22ae      	movs	r2, #174	; 0xae
 8001b9c:	2078      	movs	r0, #120	; 0x78
 8001b9e:	f7ff ffbb 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	2078      	movs	r0, #120	; 0x78
 8001ba8:	f7ff ffb6 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bac:	4621      	mov	r1, r4
 8001bae:	2210      	movs	r2, #16
 8001bb0:	2078      	movs	r0, #120	; 0x78
 8001bb2:	f7ff ffb1 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	22b0      	movs	r2, #176	; 0xb0
 8001bba:	2078      	movs	r0, #120	; 0x78
 8001bbc:	f7ff ffac 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	22c8      	movs	r2, #200	; 0xc8
 8001bc4:	2078      	movs	r0, #120	; 0x78
 8001bc6:	f7ff ffa7 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bca:	4622      	mov	r2, r4
 8001bcc:	4621      	mov	r1, r4
 8001bce:	2078      	movs	r0, #120	; 0x78
 8001bd0:	f7ff ffa2 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	2078      	movs	r0, #120	; 0x78
 8001bda:	f7ff ff9d 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001bde:	4621      	mov	r1, r4
 8001be0:	2240      	movs	r2, #64	; 0x40
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f7ff ff98 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001be8:	4621      	mov	r1, r4
 8001bea:	2281      	movs	r2, #129	; 0x81
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f7ff ff93 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	22ff      	movs	r2, #255	; 0xff
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f7ff ff8e 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	22a1      	movs	r2, #161	; 0xa1
 8001c00:	2078      	movs	r0, #120	; 0x78
 8001c02:	f7ff ff89 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c06:	4621      	mov	r1, r4
 8001c08:	22a6      	movs	r2, #166	; 0xa6
 8001c0a:	2078      	movs	r0, #120	; 0x78
 8001c0c:	f7ff ff84 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c10:	4621      	mov	r1, r4
 8001c12:	22a8      	movs	r2, #168	; 0xa8
 8001c14:	2078      	movs	r0, #120	; 0x78
 8001c16:	f7ff ff7f 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	2078      	movs	r0, #120	; 0x78
 8001c20:	f7ff ff7a 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c24:	4621      	mov	r1, r4
 8001c26:	22a4      	movs	r2, #164	; 0xa4
 8001c28:	2078      	movs	r0, #120	; 0x78
 8001c2a:	f7ff ff75 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c2e:	4621      	mov	r1, r4
 8001c30:	22d3      	movs	r2, #211	; 0xd3
 8001c32:	2078      	movs	r0, #120	; 0x78
 8001c34:	f7ff ff70 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c38:	4622      	mov	r2, r4
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	2078      	movs	r0, #120	; 0x78
 8001c3e:	f7ff ff6b 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c42:	4621      	mov	r1, r4
 8001c44:	22d5      	movs	r2, #213	; 0xd5
 8001c46:	2078      	movs	r0, #120	; 0x78
 8001c48:	f7ff ff66 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	22f0      	movs	r2, #240	; 0xf0
 8001c50:	2078      	movs	r0, #120	; 0x78
 8001c52:	f7ff ff61 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c56:	4621      	mov	r1, r4
 8001c58:	22d9      	movs	r2, #217	; 0xd9
 8001c5a:	2078      	movs	r0, #120	; 0x78
 8001c5c:	f7ff ff5c 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c60:	4621      	mov	r1, r4
 8001c62:	2222      	movs	r2, #34	; 0x22
 8001c64:	2078      	movs	r0, #120	; 0x78
 8001c66:	f7ff ff57 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	22da      	movs	r2, #218	; 0xda
 8001c6e:	2078      	movs	r0, #120	; 0x78
 8001c70:	f7ff ff52 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c74:	4621      	mov	r1, r4
 8001c76:	2212      	movs	r2, #18
 8001c78:	2078      	movs	r0, #120	; 0x78
 8001c7a:	f7ff ff4d 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c7e:	4621      	mov	r1, r4
 8001c80:	22db      	movs	r2, #219	; 0xdb
 8001c82:	2078      	movs	r0, #120	; 0x78
 8001c84:	f7ff ff48 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001c88:	4621      	mov	r1, r4
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f7ff ff43 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001c92:	4621      	mov	r1, r4
 8001c94:	228d      	movs	r2, #141	; 0x8d
 8001c96:	2078      	movs	r0, #120	; 0x78
 8001c98:	f7ff ff3e 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	2214      	movs	r2, #20
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f7ff ff39 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	22af      	movs	r2, #175	; 0xaf
 8001caa:	2078      	movs	r0, #120	; 0x78
 8001cac:	f7ff ff34 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cb0:	222e      	movs	r2, #46	; 0x2e
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	2078      	movs	r0, #120	; 0x78
 8001cb6:	f7ff ff2f 	bl	8001b18 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fe7c 	bl	80019b8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001cc0:	f7ff ff3c 	bl	8001b3c <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001cc4:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SSD1306_Init+0x158>)
	SSD1306.Initialized = 1;
 8001cc8:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8001cca:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ccc:	805c      	strh	r4, [r3, #2]
	return 1;
 8001cce:	bd10      	pop	{r4, pc}
		return 0;
 8001cd0:	2000      	movs	r0, #0
}
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	20000450 	.word	0x20000450
 8001cd8:	20000040 	.word	0x20000040

08001cdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_MspInit+0x3c>)
{
 8001cde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	f002 0201 	and.w	r2, r2, #1
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cf8:	61da      	str	r2, [r3, #28]
 8001cfa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d06:	6853      	ldr	r3, [r2, #4]
 8001d08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	b002      	add	sp, #8
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000

08001d20 <NMI_Handler>:
 8001d20:	4770      	bx	lr

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	e7fe      	b.n	8001d22 <HardFault_Handler>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler>

08001d2a <SVC_Handler>:
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f7fe ba42 	b.w	80001b8 <HAL_IncTick>

08001d34 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <SystemInit+0x40>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <SystemInit+0x44>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d50:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d58:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d60:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <SystemInit+0x48>)
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	f8ff0000 	.word	0xf8ff0000
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d80:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8001d82:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 8001d86:	480a      	ldr	r0, [pc, #40]	; (8001db0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d8a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8001d8c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d90:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d92:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d94:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d96:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d98:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d9e:	f7ff fbc7 	bl	8001530 <HAL_UART_Init>
 8001da2:	b118      	cbz	r0, 8001dac <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001da8:	f7ff be04 	b.w	80019b4 <Error_Handler>
 8001dac:	bd08      	pop	{r3, pc}
 8001dae:	bf00      	nop
 8001db0:	200004a4 	.word	0x200004a4
 8001db4:	40013800 	.word	0x40013800

08001db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
 8001dbc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	a802      	add	r0, sp, #8
 8001dc4:	f000 f87e 	bl	8001ec4 <memset>
  if(uartHandle->Instance==USART1)
 8001dc8:	6822      	ldr	r2, [r4, #0]
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x70>)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d128      	bne.n	8001e22 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001dd4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	4812      	ldr	r0, [pc, #72]	; (8001e2c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	619a      	str	r2, [r3, #24]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f7fe fa5d 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	a902      	add	r1, sp, #8
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f7fe fa53 	bl	80002c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e22:	b006      	add	sp, #24
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	bf00      	nop
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40010800 	.word	0x40010800

08001e30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e32:	e003      	b.n	8001e3c <LoopCopyDataInit>

08001e34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e3a:	3104      	adds	r1, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e44:	d3f6      	bcc.n	8001e34 <CopyDataInit>
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e48:	e002      	b.n	8001e50 <LoopFillZerobss>

08001e4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e4c:	f842 3b04 	str.w	r3, [r2], #4

08001e50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e54:	d3f9      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e56:	f7ff ff6d 	bl	8001d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f000 f80f 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5e:	f7ff fd7b 	bl	8001958 <main>
  bx lr
 8001e62:	4770      	bx	lr
  ldr r3, =_sidata
 8001e64:	08002db8 	.word	0x08002db8
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e6c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8001e70:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001e74:	200004e4 	.word	0x200004e4

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>
	...

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	2500      	movs	r5, #0
 8001e80:	4e0c      	ldr	r6, [pc, #48]	; (8001eb4 <__libc_init_array+0x38>)
 8001e82:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e84:	1ba4      	subs	r4, r4, r6
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	42a5      	cmp	r5, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	f000 f82a 	bl	8001ee4 <_init>
 8001e90:	2500      	movs	r5, #0
 8001e92:	4e0a      	ldr	r6, [pc, #40]	; (8001ebc <__libc_init_array+0x40>)
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <__libc_init_array+0x44>)
 8001e96:	1ba4      	subs	r4, r4, r6
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	42a5      	cmp	r5, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea4:	4798      	blx	r3
 8001ea6:	3501      	adds	r5, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eae:	4798      	blx	r3
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08002db0 	.word	0x08002db0
 8001eb8:	08002db0 	.word	0x08002db0
 8001ebc:	08002db0 	.word	0x08002db0
 8001ec0:	08002db4 	.word	0x08002db4

08001ec4 <memset>:
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4402      	add	r2, r0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <strcpy>:
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001eda:	f803 2b01 	strb.w	r2, [r3], #1
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <strcpy+0x2>
 8001ee2:	4770      	bx	lr

08001ee4 <_init>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	bf00      	nop
 8001ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eea:	bc08      	pop	{r3}
 8001eec:	469e      	mov	lr, r3
 8001eee:	4770      	bx	lr

08001ef0 <_fini>:
 8001ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef2:	bf00      	nop
 8001ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef6:	bc08      	pop	{r3}
 8001ef8:	469e      	mov	lr, r3
 8001efa:	4770      	bx	lr
