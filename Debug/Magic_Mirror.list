
Magic_Mirror.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001384  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001490  08001490  00011490  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015a0  080015a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  080015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  2000001c  080015c4  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  080015c4  00020080  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000caf2  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f03  00000000  00000000  0002cb37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002361  00000000  00000000  0002ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  00030da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f0  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003342  00000000  00000000  000318b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f01  00000000  00000000  00034bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036afb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d50  00000000  00000000  00036b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001478 	.word	0x08001478

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08001478 	.word	0x08001478

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89a 	bl	800029c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f84e 	bl	8000218 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000018 	.word	0x20000018
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f860 	bl	8001270 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000038 	.word	0x20000038
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000038 	.word	0x20000038

080001dc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001dc:	1ec3      	subs	r3, r0, #3
 80001de:	2b04      	cmp	r3, #4
{
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80001e4:	d903      	bls.n	80001ee <HAL_NVIC_SetPriorityGrouping+0x12>
 80001e6:	21a2      	movs	r1, #162	; 0xa2
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80001ea:	f001 f840 	bl	800126e <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f0:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fc:	041b      	lsls	r3, r3, #16
 80001fe:	0c1b      	lsrs	r3, r3, #16
 8000200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000208:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800020a:	60d4      	str	r4, [r2, #12]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop
 8000210:	080014a0 	.word	0x080014a0
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000218:	2a0f      	cmp	r2, #15
{ 
 800021a:	b570      	push	{r4, r5, r6, lr}
 800021c:	4604      	mov	r4, r0
 800021e:	460e      	mov	r6, r1
 8000220:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000222:	d903      	bls.n	800022c <HAL_NVIC_SetPriority+0x14>
 8000224:	21ba      	movs	r1, #186	; 0xba
 8000226:	481a      	ldr	r0, [pc, #104]	; (8000290 <HAL_NVIC_SetPriority+0x78>)
 8000228:	f001 f821 	bl	800126e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800022c:	2e0f      	cmp	r6, #15
 800022e:	d903      	bls.n	8000238 <HAL_NVIC_SetPriority+0x20>
 8000230:	21bb      	movs	r1, #187	; 0xbb
 8000232:	4817      	ldr	r0, [pc, #92]	; (8000290 <HAL_NVIC_SetPriority+0x78>)
 8000234:	f001 f81b 	bl	800126e <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	68d9      	ldr	r1, [r3, #12]
 800023e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000242:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000246:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000248:	2b04      	cmp	r3, #4
 800024a:	bf28      	it	cs
 800024c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024e:	2a06      	cmp	r2, #6
 8000250:	bf94      	ite	ls
 8000252:	2100      	movls	r1, #0
 8000254:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000256:	fa00 f203 	lsl.w	r2, r0, r3
 800025a:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800025c:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000260:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000262:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000266:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	ea42 0205 	orr.w	r2, r2, r5
 800026c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	bfaf      	iteee	ge
 8000272:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	4b08      	ldrlt	r3, [pc, #32]	; (8000298 <HAL_NVIC_SetPriority+0x80>)
 8000278:	f004 040f 	andlt.w	r4, r4, #15
 800027c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	bfa5      	ittet	ge
 8000280:	b2d2      	uxtbge	r2, r2
 8000282:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 800028c:	bd70      	pop	{r4, r5, r6, pc}
 800028e:	bf00      	nop
 8000290:	080014a0 	.word	0x080014a0
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002cc:	4aaa      	ldr	r2, [pc, #680]	; (8000578 <HAL_GPIO_Init+0x2b0>)
{
 80002ce:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002d0:	4290      	cmp	r0, r2
{
 80002d2:	4604      	mov	r4, r0
 80002d4:	468b      	mov	fp, r1
 80002d6:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80002d8:	d013      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002de:	4290      	cmp	r0, r2
 80002e0:	d00f      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002e6:	4290      	cmp	r0, r2
 80002e8:	d00b      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d007      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80002f6:	4290      	cmp	r0, r2
 80002f8:	d003      	beq.n	8000302 <HAL_GPIO_Init+0x3a>
 80002fa:	21cd      	movs	r1, #205	; 0xcd
 80002fc:	489f      	ldr	r0, [pc, #636]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80002fe:	f000 ffb6 	bl	800126e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000302:	f8db 2000 	ldr.w	r2, [fp]
 8000306:	b291      	uxth	r1, r2
 8000308:	b111      	cbz	r1, 8000310 <HAL_GPIO_Init+0x48>
 800030a:	0c12      	lsrs	r2, r2, #16
 800030c:	0412      	lsls	r2, r2, #16
 800030e:	b11a      	cbz	r2, 8000318 <HAL_GPIO_Init+0x50>
 8000310:	21ce      	movs	r1, #206	; 0xce
 8000312:	489a      	ldr	r0, [pc, #616]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000314:	f000 ffab 	bl	800126e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000318:	f8db 2004 	ldr.w	r2, [fp, #4]
 800031c:	2a03      	cmp	r2, #3
 800031e:	d917      	bls.n	8000350 <HAL_GPIO_Init+0x88>
 8000320:	f1a2 0111 	sub.w	r1, r2, #17
 8000324:	2901      	cmp	r1, #1
 8000326:	d913      	bls.n	8000350 <HAL_GPIO_Init+0x88>
 8000328:	4895      	ldr	r0, [pc, #596]	; (8000580 <HAL_GPIO_Init+0x2b8>)
 800032a:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800032e:	4281      	cmp	r1, r0
 8000330:	d00e      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000332:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000336:	4282      	cmp	r2, r0
 8000338:	d00a      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 800033a:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800033e:	4281      	cmp	r1, r0
 8000340:	d006      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000342:	4990      	ldr	r1, [pc, #576]	; (8000584 <HAL_GPIO_Init+0x2bc>)
 8000344:	428a      	cmp	r2, r1
 8000346:	d003      	beq.n	8000350 <HAL_GPIO_Init+0x88>
 8000348:	21cf      	movs	r1, #207	; 0xcf
 800034a:	488c      	ldr	r0, [pc, #560]	; (800057c <HAL_GPIO_Init+0x2b4>)
 800034c:	f000 ff8f 	bl	800126e <assert_failed>
{
 8000350:	2500      	movs	r5, #0
 8000352:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000354:	f8df a244 	ldr.w	sl, [pc, #580]	; 800059c <HAL_GPIO_Init+0x2d4>
 8000358:	4e8b      	ldr	r6, [pc, #556]	; (8000588 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 800035a:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800035c:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 8000360:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000364:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8000368:	45b9      	cmp	r9, r7
 800036a:	f040 808f 	bne.w	800048c <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	429c      	cmp	r4, r3
 8000372:	d011      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000374:	4985      	ldr	r1, [pc, #532]	; (800058c <HAL_GPIO_Init+0x2c4>)
 8000376:	428c      	cmp	r4, r1
 8000378:	d00e      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 800037a:	4b85      	ldr	r3, [pc, #532]	; (8000590 <HAL_GPIO_Init+0x2c8>)
 800037c:	429c      	cmp	r4, r3
 800037e:	d00b      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000384:	428c      	cmp	r4, r1
 8000386:	d007      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800038c:	428c      	cmp	r4, r1
 800038e:	d003      	beq.n	8000398 <HAL_GPIO_Init+0xd0>
 8000390:	21dd      	movs	r1, #221	; 0xdd
 8000392:	487a      	ldr	r0, [pc, #488]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000394:	f000 ff6b 	bl	800126e <assert_failed>
      switch (GPIO_Init->Mode)
 8000398:	f8db 1004 	ldr.w	r1, [fp, #4]
 800039c:	2912      	cmp	r1, #18
 800039e:	f000 80d3 	beq.w	8000548 <HAL_GPIO_Init+0x280>
 80003a2:	f200 808d 	bhi.w	80004c0 <HAL_GPIO_Init+0x1f8>
 80003a6:	2902      	cmp	r1, #2
 80003a8:	f000 80c1 	beq.w	800052e <HAL_GPIO_Init+0x266>
 80003ac:	d877      	bhi.n	800049e <HAL_GPIO_Init+0x1d6>
 80003ae:	2900      	cmp	r1, #0
 80003b0:	f000 8093 	beq.w	80004da <HAL_GPIO_Init+0x212>
 80003b4:	2901      	cmp	r1, #1
 80003b6:	f000 80ae 	beq.w	8000516 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ba:	2fff      	cmp	r7, #255	; 0xff
 80003bc:	bf82      	ittt	hi
 80003be:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 80003c2:	f1ae 0e08 	subhi.w	lr, lr, #8
 80003c6:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ca:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ce:	bf9d      	ittte	ls
 80003d0:	4620      	movls	r0, r4
 80003d2:	6822      	ldrls	r2, [r4, #0]
 80003d4:	ea4f 0188 	movls.w	r1, r8, lsl #2
 80003d8:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003da:	fa0e fc01 	lsl.w	ip, lr, r1
 80003de:	ea22 020c 	bic.w	r2, r2, ip
 80003e2:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e6:	bf88      	it	hi
 80003e8:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ea:	4311      	orrs	r1, r2
 80003ec:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ee:	f8db 0004 	ldr.w	r0, [fp, #4]
 80003f2:	00c3      	lsls	r3, r0, #3
 80003f4:	d54a      	bpl.n	800048c <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	f8da 2018 	ldr.w	r2, [sl, #24]
 80003fa:	f028 0103 	bic.w	r1, r8, #3
 80003fe:	f042 0201 	orr.w	r2, r2, #1
 8000402:	f8ca 2018 	str.w	r2, [sl, #24]
 8000406:	f8da 2018 	ldr.w	r2, [sl, #24]
 800040a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800040e:	f002 0201 	and.w	r2, r2, #1
 8000412:	9203      	str	r2, [sp, #12]
 8000414:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000418:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041c:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000420:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000424:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000426:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800042c:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000430:	f000 809b 	beq.w	800056a <HAL_GPIO_Init+0x2a2>
 8000434:	4a55      	ldr	r2, [pc, #340]	; (800058c <HAL_GPIO_Init+0x2c4>)
 8000436:	4294      	cmp	r4, r2
 8000438:	f000 8099 	beq.w	800056e <HAL_GPIO_Init+0x2a6>
 800043c:	4b54      	ldr	r3, [pc, #336]	; (8000590 <HAL_GPIO_Init+0x2c8>)
 800043e:	429c      	cmp	r4, r3
 8000440:	f000 8097 	beq.w	8000572 <HAL_GPIO_Init+0x2aa>
 8000444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000448:	4294      	cmp	r4, r2
 800044a:	bf14      	ite	ne
 800044c:	2204      	movne	r2, #4
 800044e:	2203      	moveq	r2, #3
 8000450:	fa02 f20c 	lsl.w	r2, r2, ip
 8000454:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8000458:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045a:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800045e:	bf4c      	ite	mi
 8000460:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000462:	43ba      	bicpl	r2, r7
 8000464:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000466:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000468:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800046a:	bf4c      	ite	mi
 800046c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800046e:	43ba      	bicpl	r2, r7
 8000470:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000472:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000474:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000476:	bf4c      	ite	mi
 8000478:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800047a:	43ba      	bicpl	r2, r7
 800047c:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800047e:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000480:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000482:	bf4c      	ite	mi
 8000484:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000486:	ea22 0707 	bicpl.w	r7, r2, r7
 800048a:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800048c:	f108 0801 	add.w	r8, r8, #1
 8000490:	f1b8 0f10 	cmp.w	r8, #16
 8000494:	f47f af61 	bne.w	800035a <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8000498:	b005      	add	sp, #20
 800049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800049e:	2903      	cmp	r1, #3
 80004a0:	d05f      	beq.n	8000562 <HAL_GPIO_Init+0x29a>
 80004a2:	2911      	cmp	r1, #17
 80004a4:	d189      	bne.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80004a6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80004aa:	3a01      	subs	r2, #1
 80004ac:	2a02      	cmp	r2, #2
 80004ae:	d903      	bls.n	80004b8 <HAL_GPIO_Init+0x1f0>
 80004b0:	21ec      	movs	r1, #236	; 0xec
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80004b4:	f000 fedb 	bl	800126e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004b8:	f8db 500c 	ldr.w	r5, [fp, #12]
 80004bc:	3504      	adds	r5, #4
          break;
 80004be:	e77c      	b.n	80003ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004c0:	4834      	ldr	r0, [pc, #208]	; (8000594 <HAL_GPIO_Init+0x2cc>)
 80004c2:	4281      	cmp	r1, r0
 80004c4:	d009      	beq.n	80004da <HAL_GPIO_Init+0x212>
 80004c6:	d81c      	bhi.n	8000502 <HAL_GPIO_Init+0x23a>
 80004c8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80004cc:	4281      	cmp	r1, r0
 80004ce:	d004      	beq.n	80004da <HAL_GPIO_Init+0x212>
 80004d0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80004d4:	4281      	cmp	r1, r0
 80004d6:	f47f af70 	bne.w	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80004da:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004de:	2902      	cmp	r1, #2
 80004e0:	d904      	bls.n	80004ec <HAL_GPIO_Init+0x224>
 80004e2:	f240 1107 	movw	r1, #263	; 0x107
 80004e6:	4825      	ldr	r0, [pc, #148]	; (800057c <HAL_GPIO_Init+0x2b4>)
 80004e8:	f000 fec1 	bl	800126e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ec:	f8db 1008 	ldr.w	r1, [fp, #8]
 80004f0:	b3c9      	cbz	r1, 8000566 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f2:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80004f4:	bf0c      	ite	eq
 80004f6:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80004fa:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fe:	2508      	movs	r5, #8
 8000500:	e75b      	b.n	80003ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000502:	4825      	ldr	r0, [pc, #148]	; (8000598 <HAL_GPIO_Init+0x2d0>)
 8000504:	4281      	cmp	r1, r0
 8000506:	d0e8      	beq.n	80004da <HAL_GPIO_Init+0x212>
 8000508:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800050c:	4281      	cmp	r1, r0
 800050e:	d0e4      	beq.n	80004da <HAL_GPIO_Init+0x212>
 8000510:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8000514:	e7de      	b.n	80004d4 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000516:	f8db 200c 	ldr.w	r2, [fp, #12]
 800051a:	3a01      	subs	r2, #1
 800051c:	2a02      	cmp	r2, #2
 800051e:	d903      	bls.n	8000528 <HAL_GPIO_Init+0x260>
 8000520:	21e5      	movs	r1, #229	; 0xe5
 8000522:	4816      	ldr	r0, [pc, #88]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000524:	f000 fea3 	bl	800126e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000528:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 800052c:	e745      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800052e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8000532:	3a01      	subs	r2, #1
 8000534:	2a02      	cmp	r2, #2
 8000536:	d903      	bls.n	8000540 <HAL_GPIO_Init+0x278>
 8000538:	21f3      	movs	r1, #243	; 0xf3
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <HAL_GPIO_Init+0x2b4>)
 800053c:	f000 fe97 	bl	800126e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000540:	f8db 500c 	ldr.w	r5, [fp, #12]
 8000544:	3508      	adds	r5, #8
          break;
 8000546:	e738      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000548:	f8db 200c 	ldr.w	r2, [fp, #12]
 800054c:	3a01      	subs	r2, #1
 800054e:	2a02      	cmp	r2, #2
 8000550:	d903      	bls.n	800055a <HAL_GPIO_Init+0x292>
 8000552:	21fa      	movs	r1, #250	; 0xfa
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <HAL_GPIO_Init+0x2b4>)
 8000556:	f000 fe8a 	bl	800126e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800055a:	f8db 500c 	ldr.w	r5, [fp, #12]
 800055e:	350c      	adds	r5, #12
          break;
 8000560:	e72b      	b.n	80003ba <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000562:	2500      	movs	r5, #0
 8000564:	e729      	b.n	80003ba <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000566:	2504      	movs	r5, #4
 8000568:	e727      	b.n	80003ba <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800056a:	2200      	movs	r2, #0
 800056c:	e770      	b.n	8000450 <HAL_GPIO_Init+0x188>
 800056e:	2201      	movs	r2, #1
 8000570:	e76e      	b.n	8000450 <HAL_GPIO_Init+0x188>
 8000572:	2202      	movs	r2, #2
 8000574:	e76c      	b.n	8000450 <HAL_GPIO_Init+0x188>
 8000576:	bf00      	nop
 8000578:	40010800 	.word	0x40010800
 800057c:	080014db 	.word	0x080014db
 8000580:	10110000 	.word	0x10110000
 8000584:	10220000 	.word	0x10220000
 8000588:	40010400 	.word	0x40010400
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40011000 	.word	0x40011000
 8000594:	10210000 	.word	0x10210000
 8000598:	10310000 	.word	0x10310000
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4605      	mov	r5, r0
 80005a4:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005a6:	460c      	mov	r4, r1
 80005a8:	b921      	cbnz	r1, 80005b4 <HAL_GPIO_WritePin+0x14>
 80005aa:	f240 11e3 	movw	r1, #483	; 0x1e3
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <HAL_GPIO_WritePin+0x30>)
 80005b0:	f000 fe5d 	bl	800126e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80005b4:	2e01      	cmp	r6, #1
 80005b6:	d906      	bls.n	80005c6 <HAL_GPIO_WritePin+0x26>
 80005b8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <HAL_GPIO_WritePin+0x30>)
 80005be:	f000 fe56 	bl	800126e <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005c2:	612c      	str	r4, [r5, #16]
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d1fb      	bne.n	80005c2 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005ca:	0424      	lsls	r4, r4, #16
 80005cc:	e7f9      	b.n	80005c2 <HAL_GPIO_WritePin+0x22>
 80005ce:	bf00      	nop
 80005d0:	080014db 	.word	0x080014db

080005d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005d4:	b538      	push	{r3, r4, r5, lr}
 80005d6:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005d8:	460c      	mov	r4, r1
 80005da:	b921      	cbnz	r1, 80005e6 <HAL_GPIO_TogglePin+0x12>
 80005dc:	f240 11f9 	movw	r1, #505	; 0x1f9
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <HAL_GPIO_TogglePin+0x1c>)
 80005e2:	f000 fe44 	bl	800126e <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80005e6:	68eb      	ldr	r3, [r5, #12]
 80005e8:	405c      	eors	r4, r3
 80005ea:	60ec      	str	r4, [r5, #12]
 80005ec:	bd38      	pop	{r3, r4, r5, pc}
 80005ee:	bf00      	nop
 80005f0:	080014db 	.word	0x080014db

080005f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80005f8:	4604      	mov	r4, r0
 80005fa:	b920      	cbnz	r0, 8000606 <HAL_RCC_OscConfig+0x12>
 80005fc:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000600:	48a5      	ldr	r0, [pc, #660]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000602:	f000 fe34 	bl	800126e <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	b133      	cbz	r3, 8000618 <HAL_RCC_OscConfig+0x24>
 800060a:	071a      	lsls	r2, r3, #28
 800060c:	d104      	bne.n	8000618 <HAL_RCC_OscConfig+0x24>
 800060e:	f240 1171 	movw	r1, #369	; 0x171
 8000612:	48a1      	ldr	r0, [pc, #644]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000614:	f000 fe2b 	bl	800126e <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d418      	bmi.n	8000650 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	079f      	lsls	r7, r3, #30
 8000622:	d472      	bmi.n	800070a <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	0719      	lsls	r1, r3, #28
 8000628:	f100 80b9 	bmi.w	800079e <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	075a      	lsls	r2, r3, #29
 8000630:	f100 80eb 	bmi.w	800080a <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000634:	69e3      	ldr	r3, [r4, #28]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d904      	bls.n	8000644 <HAL_RCC_OscConfig+0x50>
 800063a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800063e:	4896      	ldr	r0, [pc, #600]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000640:	f000 fe15 	bl	800126e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000644:	69e2      	ldr	r2, [r4, #28]
 8000646:	2a00      	cmp	r2, #0
 8000648:	f040 815e 	bne.w	8000908 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800064c:	2000      	movs	r0, #0
 800064e:	e020      	b.n	8000692 <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000650:	6863      	ldr	r3, [r4, #4]
 8000652:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000656:	d007      	beq.n	8000668 <HAL_RCC_OscConfig+0x74>
 8000658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800065c:	d004      	beq.n	8000668 <HAL_RCC_OscConfig+0x74>
 800065e:	f240 1177 	movw	r1, #375	; 0x177
 8000662:	488d      	ldr	r0, [pc, #564]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000664:	f000 fe03 	bl	800126e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000668:	4d8c      	ldr	r5, [pc, #560]	; (800089c <HAL_RCC_OscConfig+0x2a8>)
 800066a:	686b      	ldr	r3, [r5, #4]
 800066c:	f003 030c 	and.w	r3, r3, #12
 8000670:	2b04      	cmp	r3, #4
 8000672:	d007      	beq.n	8000684 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000674:	686b      	ldr	r3, [r5, #4]
 8000676:	f003 030c 	and.w	r3, r3, #12
 800067a:	2b08      	cmp	r3, #8
 800067c:	d10c      	bne.n	8000698 <HAL_RCC_OscConfig+0xa4>
 800067e:	686b      	ldr	r3, [r5, #4]
 8000680:	03de      	lsls	r6, r3, #15
 8000682:	d509      	bpl.n	8000698 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	039d      	lsls	r5, r3, #14
 8000688:	d5c9      	bpl.n	800061e <HAL_RCC_OscConfig+0x2a>
 800068a:	6863      	ldr	r3, [r4, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1c6      	bne.n	800061e <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8000690:	2001      	movs	r0, #1
}
 8000692:	b002      	add	sp, #8
 8000694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000698:	6863      	ldr	r3, [r4, #4]
 800069a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800069e:	d110      	bne.n	80006c2 <HAL_RCC_OscConfig+0xce>
 80006a0:	682b      	ldr	r3, [r5, #0]
 80006a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006a8:	f7ff fd92 	bl	80001d0 <HAL_GetTick>
 80006ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ae:	682b      	ldr	r3, [r5, #0]
 80006b0:	0398      	lsls	r0, r3, #14
 80006b2:	d4b4      	bmi.n	800061e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b4:	f7ff fd8c 	bl	80001d0 <HAL_GetTick>
 80006b8:	1b80      	subs	r0, r0, r6
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	d9f7      	bls.n	80006ae <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80006be:	2003      	movs	r0, #3
 80006c0:	e7e7      	b.n	8000692 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c2:	b99b      	cbnz	r3, 80006ec <HAL_RCC_OscConfig+0xf8>
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ca:	602b      	str	r3, [r5, #0]
 80006cc:	682b      	ldr	r3, [r5, #0]
 80006ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006d4:	f7ff fd7c 	bl	80001d0 <HAL_GetTick>
 80006d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	0399      	lsls	r1, r3, #14
 80006de:	d59e      	bpl.n	800061e <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006e0:	f7ff fd76 	bl	80001d0 <HAL_GetTick>
 80006e4:	1b80      	subs	r0, r0, r6
 80006e6:	2864      	cmp	r0, #100	; 0x64
 80006e8:	d9f7      	bls.n	80006da <HAL_RCC_OscConfig+0xe6>
 80006ea:	e7e8      	b.n	80006be <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006f0:	682b      	ldr	r3, [r5, #0]
 80006f2:	d103      	bne.n	80006fc <HAL_RCC_OscConfig+0x108>
 80006f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f8:	602b      	str	r3, [r5, #0]
 80006fa:	e7d1      	b.n	80006a0 <HAL_RCC_OscConfig+0xac>
 80006fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000700:	602b      	str	r3, [r5, #0]
 8000702:	682b      	ldr	r3, [r5, #0]
 8000704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000708:	e7cd      	b.n	80006a6 <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800070a:	6923      	ldr	r3, [r4, #16]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d904      	bls.n	800071a <HAL_RCC_OscConfig+0x126>
 8000710:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000714:	4860      	ldr	r0, [pc, #384]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000716:	f000 fdaa 	bl	800126e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800071a:	6963      	ldr	r3, [r4, #20]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	d904      	bls.n	800072a <HAL_RCC_OscConfig+0x136>
 8000720:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000724:	485c      	ldr	r0, [pc, #368]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 8000726:	f000 fda2 	bl	800126e <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800072a:	4d5c      	ldr	r5, [pc, #368]	; (800089c <HAL_RCC_OscConfig+0x2a8>)
 800072c:	686b      	ldr	r3, [r5, #4]
 800072e:	f013 0f0c 	tst.w	r3, #12
 8000732:	d007      	beq.n	8000744 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000734:	686b      	ldr	r3, [r5, #4]
 8000736:	f003 030c 	and.w	r3, r3, #12
 800073a:	2b08      	cmp	r3, #8
 800073c:	d110      	bne.n	8000760 <HAL_RCC_OscConfig+0x16c>
 800073e:	686b      	ldr	r3, [r5, #4]
 8000740:	03da      	lsls	r2, r3, #15
 8000742:	d40d      	bmi.n	8000760 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000744:	682b      	ldr	r3, [r5, #0]
 8000746:	079b      	lsls	r3, r3, #30
 8000748:	d502      	bpl.n	8000750 <HAL_RCC_OscConfig+0x15c>
 800074a:	6923      	ldr	r3, [r4, #16]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d19f      	bne.n	8000690 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	6962      	ldr	r2, [r4, #20]
 8000754:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000758:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800075c:	602b      	str	r3, [r5, #0]
 800075e:	e761      	b.n	8000624 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000760:	6922      	ldr	r2, [r4, #16]
 8000762:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <HAL_RCC_OscConfig+0x2ac>)
 8000764:	b16a      	cbz	r2, 8000782 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fd31 	bl	80001d0 <HAL_GetTick>
 800076e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	079f      	lsls	r7, r3, #30
 8000774:	d4ec      	bmi.n	8000750 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000776:	f7ff fd2b 	bl	80001d0 <HAL_GetTick>
 800077a:	1b80      	subs	r0, r0, r6
 800077c:	2802      	cmp	r0, #2
 800077e:	d9f7      	bls.n	8000770 <HAL_RCC_OscConfig+0x17c>
 8000780:	e79d      	b.n	80006be <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8000782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000784:	f7ff fd24 	bl	80001d0 <HAL_GetTick>
 8000788:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	0798      	lsls	r0, r3, #30
 800078e:	f57f af49 	bpl.w	8000624 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000792:	f7ff fd1d 	bl	80001d0 <HAL_GetTick>
 8000796:	1b80      	subs	r0, r0, r6
 8000798:	2802      	cmp	r0, #2
 800079a:	d9f6      	bls.n	800078a <HAL_RCC_OscConfig+0x196>
 800079c:	e78f      	b.n	80006be <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800079e:	69a3      	ldr	r3, [r4, #24]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d904      	bls.n	80007ae <HAL_RCC_OscConfig+0x1ba>
 80007a4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80007a8:	483b      	ldr	r0, [pc, #236]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 80007aa:	f000 fd60 	bl	800126e <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007ae:	69a2      	ldr	r2, [r4, #24]
 80007b0:	4d3a      	ldr	r5, [pc, #232]	; (800089c <HAL_RCC_OscConfig+0x2a8>)
 80007b2:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <HAL_RCC_OscConfig+0x2b0>)
 80007b4:	b1da      	cbz	r2, 80007ee <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007ba:	f7ff fd09 	bl	80001d0 <HAL_GetTick>
 80007be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007c2:	079b      	lsls	r3, r3, #30
 80007c4:	d50d      	bpl.n	80007e2 <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80007c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <HAL_RCC_OscConfig+0x2b4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80007d2:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80007d4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	9201      	str	r2, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f9      	bne.n	80007d4 <HAL_RCC_OscConfig+0x1e0>
 80007e0:	e724      	b.n	800062c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007e2:	f7ff fcf5 	bl	80001d0 <HAL_GetTick>
 80007e6:	1b80      	subs	r0, r0, r6
 80007e8:	2802      	cmp	r0, #2
 80007ea:	d9e9      	bls.n	80007c0 <HAL_RCC_OscConfig+0x1cc>
 80007ec:	e767      	b.n	80006be <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 80007ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007f0:	f7ff fcee 	bl	80001d0 <HAL_GetTick>
 80007f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007f8:	079f      	lsls	r7, r3, #30
 80007fa:	f57f af17 	bpl.w	800062c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007fe:	f7ff fce7 	bl	80001d0 <HAL_GetTick>
 8000802:	1b80      	subs	r0, r0, r6
 8000804:	2802      	cmp	r0, #2
 8000806:	d9f6      	bls.n	80007f6 <HAL_RCC_OscConfig+0x202>
 8000808:	e759      	b.n	80006be <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800080a:	68e3      	ldr	r3, [r4, #12]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d906      	bls.n	800081e <HAL_RCC_OscConfig+0x22a>
 8000810:	2b05      	cmp	r3, #5
 8000812:	d004      	beq.n	800081e <HAL_RCC_OscConfig+0x22a>
 8000814:	f240 211b 	movw	r1, #539	; 0x21b
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <HAL_RCC_OscConfig+0x2a4>)
 800081a:	f000 fd28 	bl	800126e <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800081e:	4d1f      	ldr	r5, [pc, #124]	; (800089c <HAL_RCC_OscConfig+0x2a8>)
 8000820:	69eb      	ldr	r3, [r5, #28]
 8000822:	00d8      	lsls	r0, r3, #3
 8000824:	d424      	bmi.n	8000870 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 8000826:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	69eb      	ldr	r3, [r5, #28]
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	61eb      	str	r3, [r5, #28]
 8000830:	69eb      	ldr	r3, [r5, #28]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800083a:	4e1c      	ldr	r6, [pc, #112]	; (80008ac <HAL_RCC_OscConfig+0x2b8>)
 800083c:	6833      	ldr	r3, [r6, #0]
 800083e:	05d9      	lsls	r1, r3, #23
 8000840:	d518      	bpl.n	8000874 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000842:	68e3      	ldr	r3, [r4, #12]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d133      	bne.n	80008b0 <HAL_RCC_OscConfig+0x2bc>
 8000848:	6a2b      	ldr	r3, [r5, #32]
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000850:	f7ff fcbe 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000854:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000858:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085a:	6a2b      	ldr	r3, [r5, #32]
 800085c:	079b      	lsls	r3, r3, #30
 800085e:	d54c      	bpl.n	80008fa <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8000860:	2f00      	cmp	r7, #0
 8000862:	f43f aee7 	beq.w	8000634 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000866:	69eb      	ldr	r3, [r5, #28]
 8000868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800086c:	61eb      	str	r3, [r5, #28]
 800086e:	e6e1      	b.n	8000634 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8000870:	2700      	movs	r7, #0
 8000872:	e7e2      	b.n	800083a <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000874:	6833      	ldr	r3, [r6, #0]
 8000876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800087c:	f7ff fca8 	bl	80001d0 <HAL_GetTick>
 8000880:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000882:	6833      	ldr	r3, [r6, #0]
 8000884:	05da      	lsls	r2, r3, #23
 8000886:	d4dc      	bmi.n	8000842 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000888:	f7ff fca2 	bl	80001d0 <HAL_GetTick>
 800088c:	eba0 0008 	sub.w	r0, r0, r8
 8000890:	2864      	cmp	r0, #100	; 0x64
 8000892:	d9f6      	bls.n	8000882 <HAL_RCC_OscConfig+0x28e>
 8000894:	e713      	b.n	80006be <HAL_RCC_OscConfig+0xca>
 8000896:	bf00      	nop
 8000898:	08001514 	.word	0x08001514
 800089c:	40021000 	.word	0x40021000
 80008a0:	42420000 	.word	0x42420000
 80008a4:	42420480 	.word	0x42420480
 80008a8:	20000018 	.word	0x20000018
 80008ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b0:	b9ab      	cbnz	r3, 80008de <HAL_RCC_OscConfig+0x2ea>
 80008b2:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	622b      	str	r3, [r5, #32]
 80008be:	6a2b      	ldr	r3, [r5, #32]
 80008c0:	f023 0304 	bic.w	r3, r3, #4
 80008c4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80008c6:	f7ff fc83 	bl	80001d0 <HAL_GetTick>
 80008ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008cc:	6a2b      	ldr	r3, [r5, #32]
 80008ce:	0798      	lsls	r0, r3, #30
 80008d0:	d5c6      	bpl.n	8000860 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d2:	f7ff fc7d 	bl	80001d0 <HAL_GetTick>
 80008d6:	1b80      	subs	r0, r0, r6
 80008d8:	4540      	cmp	r0, r8
 80008da:	d9f7      	bls.n	80008cc <HAL_RCC_OscConfig+0x2d8>
 80008dc:	e6ef      	b.n	80006be <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008de:	2b05      	cmp	r3, #5
 80008e0:	6a2b      	ldr	r3, [r5, #32]
 80008e2:	d103      	bne.n	80008ec <HAL_RCC_OscConfig+0x2f8>
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	622b      	str	r3, [r5, #32]
 80008ea:	e7ad      	b.n	8000848 <HAL_RCC_OscConfig+0x254>
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	622b      	str	r3, [r5, #32]
 80008f2:	6a2b      	ldr	r3, [r5, #32]
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	e7a9      	b.n	800084e <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008fa:	f7ff fc69 	bl	80001d0 <HAL_GetTick>
 80008fe:	eba0 0008 	sub.w	r0, r0, r8
 8000902:	42b0      	cmp	r0, r6
 8000904:	d9a9      	bls.n	800085a <HAL_RCC_OscConfig+0x266>
 8000906:	e6da      	b.n	80006be <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000908:	4d38      	ldr	r5, [pc, #224]	; (80009ec <HAL_RCC_OscConfig+0x3f8>)
 800090a:	686b      	ldr	r3, [r5, #4]
 800090c:	f003 030c 	and.w	r3, r3, #12
 8000910:	2b08      	cmp	r3, #8
 8000912:	f43f aebd 	beq.w	8000690 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000916:	2a02      	cmp	r2, #2
 8000918:	4e35      	ldr	r6, [pc, #212]	; (80009f0 <HAL_RCC_OscConfig+0x3fc>)
 800091a:	d157      	bne.n	80009cc <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800091c:	6a23      	ldr	r3, [r4, #32]
 800091e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8000922:	d004      	beq.n	800092e <HAL_RCC_OscConfig+0x33a>
 8000924:	f240 21c2 	movw	r1, #706	; 0x2c2
 8000928:	4832      	ldr	r0, [pc, #200]	; (80009f4 <HAL_RCC_OscConfig+0x400>)
 800092a:	f000 fca0 	bl	800126e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800092e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000930:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8000934:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000938:	d010      	beq.n	800095c <HAL_RCC_OscConfig+0x368>
 800093a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800093e:	d00d      	beq.n	800095c <HAL_RCC_OscConfig+0x368>
 8000940:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000944:	d00a      	beq.n	800095c <HAL_RCC_OscConfig+0x368>
 8000946:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800094a:	d007      	beq.n	800095c <HAL_RCC_OscConfig+0x368>
 800094c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000950:	d004      	beq.n	800095c <HAL_RCC_OscConfig+0x368>
 8000952:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000956:	4827      	ldr	r0, [pc, #156]	; (80009f4 <HAL_RCC_OscConfig+0x400>)
 8000958:	f000 fc89 	bl	800126e <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000960:	f7ff fc36 	bl	80001d0 <HAL_GetTick>
 8000964:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	0199      	lsls	r1, r3, #6
 800096a:	d429      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800096c:	6a23      	ldr	r3, [r4, #32]
 800096e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000972:	d10e      	bne.n	8000992 <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8000974:	68a3      	ldr	r3, [r4, #8]
 8000976:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800097a:	d004      	beq.n	8000986 <HAL_RCC_OscConfig+0x392>
 800097c:	f240 21d9 	movw	r1, #729	; 0x2d9
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <HAL_RCC_OscConfig+0x400>)
 8000982:	f000 fc74 	bl	800126e <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000986:	686b      	ldr	r3, [r5, #4]
 8000988:	68a2      	ldr	r2, [r4, #8]
 800098a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800098e:	4313      	orrs	r3, r2
 8000990:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000992:	6a23      	ldr	r3, [r4, #32]
 8000994:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000996:	686a      	ldr	r2, [r5, #4]
 8000998:	430b      	orrs	r3, r1
 800099a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800099e:	4313      	orrs	r3, r2
 80009a0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80009a2:	2301      	movs	r3, #1
 80009a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009a6:	f7ff fc13 	bl	80001d0 <HAL_GetTick>
 80009aa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	019a      	lsls	r2, r3, #6
 80009b0:	f53f ae4c 	bmi.w	800064c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b4:	f7ff fc0c 	bl	80001d0 <HAL_GetTick>
 80009b8:	1b00      	subs	r0, r0, r4
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x3b8>
 80009be:	e67e      	b.n	80006be <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c0:	f7ff fc06 	bl	80001d0 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9cd      	bls.n	8000966 <HAL_RCC_OscConfig+0x372>
 80009ca:	e678      	b.n	80006be <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009d0:	f7ff fbfe 	bl	80001d0 <HAL_GetTick>
 80009d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	f57f ae37 	bpl.w	800064c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009de:	f7ff fbf7 	bl	80001d0 <HAL_GetTick>
 80009e2:	1b00      	subs	r0, r0, r4
 80009e4:	2802      	cmp	r0, #2
 80009e6:	d9f6      	bls.n	80009d6 <HAL_RCC_OscConfig+0x3e2>
 80009e8:	e669      	b.n	80006be <HAL_RCC_OscConfig+0xca>
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	42420060 	.word	0x42420060
 80009f4:	08001514 	.word	0x08001514

080009f8 <HAL_RCC_GetSysClockFreq>:
{
 80009f8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009fc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009fe:	ac02      	add	r4, sp, #8
 8000a00:	f103 0510 	add.w	r5, r3, #16
 8000a04:	4622      	mov	r2, r4
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	6859      	ldr	r1, [r3, #4]
 8000a0a:	3308      	adds	r3, #8
 8000a0c:	c203      	stmia	r2!, {r0, r1}
 8000a0e:	42ab      	cmp	r3, r5
 8000a10:	4614      	mov	r4, r2
 8000a12:	d1f7      	bne.n	8000a04 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a14:	2301      	movs	r3, #1
 8000a16:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a1a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a1c:	4911      	ldr	r1, [pc, #68]	; (8000a64 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a1e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a22:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a24:	f003 020c 	and.w	r2, r3, #12
 8000a28:	2a08      	cmp	r2, #8
 8000a2a:	d117      	bne.n	8000a5c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a2c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a30:	a806      	add	r0, sp, #24
 8000a32:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a34:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a36:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a3a:	d50c      	bpl.n	8000a56 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a3c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a40:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a44:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a46:	aa06      	add	r2, sp, #24
 8000a48:	4413      	add	r3, r2
 8000a4a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a4e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a52:	b007      	add	sp, #28
 8000a54:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_RCC_GetSysClockFreq+0x74>)
 8000a58:	4350      	muls	r0, r2
 8000a5a:	e7fa      	b.n	8000a52 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a5e:	e7f8      	b.n	8000a52 <HAL_RCC_GetSysClockFreq+0x5a>
 8000a60:	08001490 	.word	0x08001490
 8000a64:	40021000 	.word	0x40021000
 8000a68:	007a1200 	.word	0x007a1200
 8000a6c:	003d0900 	.word	0x003d0900

08000a70 <HAL_RCC_ClockConfig>:
{
 8000a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a74:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8000a76:	4604      	mov	r4, r0
 8000a78:	b920      	cbnz	r0, 8000a84 <HAL_RCC_ClockConfig+0x14>
 8000a7a:	f240 312e 	movw	r1, #814	; 0x32e
 8000a7e:	487f      	ldr	r0, [pc, #508]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000a80:	f000 fbf5 	bl	800126e <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	071d      	lsls	r5, r3, #28
 8000a88:	d104      	bne.n	8000a94 <HAL_RCC_ClockConfig+0x24>
 8000a8a:	f240 312f 	movw	r1, #815	; 0x32f
 8000a8e:	487b      	ldr	r0, [pc, #492]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000a90:	f000 fbed 	bl	800126e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000a94:	2e02      	cmp	r6, #2
 8000a96:	d904      	bls.n	8000aa2 <HAL_RCC_ClockConfig+0x32>
 8000a98:	f44f 714c 	mov.w	r1, #816	; 0x330
 8000a9c:	4877      	ldr	r0, [pc, #476]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000a9e:	f000 fbe6 	bl	800126e <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa2:	4a77      	ldr	r2, [pc, #476]	; (8000c80 <HAL_RCC_ClockConfig+0x210>)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	d83d      	bhi.n	8000b2a <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	0798      	lsls	r0, r3, #30
 8000ab2:	d447      	bmi.n	8000b44 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	07da      	lsls	r2, r3, #31
 8000ab8:	d470      	bmi.n	8000b9c <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aba:	4a71      	ldr	r2, [pc, #452]	; (8000c80 <HAL_RCC_ClockConfig+0x210>)
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	429e      	cmp	r6, r3
 8000ac4:	f0c0 80b5 	bcc.w	8000c32 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	4d6e      	ldr	r5, [pc, #440]	; (8000c84 <HAL_RCC_ClockConfig+0x214>)
 8000acc:	f013 0f04 	tst.w	r3, #4
 8000ad0:	f040 80bb 	bne.w	8000c4a <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	071b      	lsls	r3, r3, #28
 8000ad8:	d517      	bpl.n	8000b0a <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000ada:	6923      	ldr	r3, [r4, #16]
 8000adc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000ae0:	d00c      	beq.n	8000afc <HAL_RCC_ClockConfig+0x8c>
 8000ae2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ae6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000aea:	d007      	beq.n	8000afc <HAL_RCC_ClockConfig+0x8c>
 8000aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000af0:	d004      	beq.n	8000afc <HAL_RCC_ClockConfig+0x8c>
 8000af2:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8000af6:	4861      	ldr	r0, [pc, #388]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000af8:	f000 fbb9 	bl	800126e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000afc:	686b      	ldr	r3, [r5, #4]
 8000afe:	6922      	ldr	r2, [r4, #16]
 8000b00:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b08:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b0a:	f7ff ff75 	bl	80009f8 <HAL_RCC_GetSysClockFreq>
 8000b0e:	686b      	ldr	r3, [r5, #4]
 8000b10:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <HAL_RCC_ClockConfig+0x218>)
 8000b12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b16:	5cd3      	ldrb	r3, [r2, r3]
 8000b18:	40d8      	lsrs	r0, r3
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <HAL_RCC_ClockConfig+0x21c>)
 8000b1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fb14 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b24:	2000      	movs	r0, #0
}
 8000b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	f023 0307 	bic.w	r3, r3, #7
 8000b30:	4333      	orrs	r3, r6
 8000b32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b34:	6813      	ldr	r3, [r2, #0]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	429e      	cmp	r6, r3
 8000b3c:	d0b7      	beq.n	8000aae <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8000b3e:	2001      	movs	r0, #1
 8000b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b44:	4d4f      	ldr	r5, [pc, #316]	; (8000c84 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b46:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b4a:	bf1e      	ittt	ne
 8000b4c:	686a      	ldrne	r2, [r5, #4]
 8000b4e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b52:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b54:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b56:	bf42      	ittt	mi
 8000b58:	686b      	ldrmi	r3, [r5, #4]
 8000b5a:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8000b5e:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000b60:	68a3      	ldr	r3, [r4, #8]
 8000b62:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000b66:	d012      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x11e>
 8000b68:	f023 0220 	bic.w	r2, r3, #32
 8000b6c:	2a90      	cmp	r2, #144	; 0x90
 8000b6e:	d00e      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x11e>
 8000b70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b74:	2aa0      	cmp	r2, #160	; 0xa0
 8000b76:	d00a      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x11e>
 8000b78:	f023 0210 	bic.w	r2, r3, #16
 8000b7c:	2ac0      	cmp	r2, #192	; 0xc0
 8000b7e:	d006      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x11e>
 8000b80:	2bf0      	cmp	r3, #240	; 0xf0
 8000b82:	d004      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x11e>
 8000b84:	f240 3156 	movw	r1, #854	; 0x356
 8000b88:	483c      	ldr	r0, [pc, #240]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000b8a:	f000 fb70 	bl	800126e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8e:	686b      	ldr	r3, [r5, #4]
 8000b90:	68a2      	ldr	r2, [r4, #8]
 8000b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b96:	4313      	orrs	r3, r2
 8000b98:	606b      	str	r3, [r5, #4]
 8000b9a:	e78b      	b.n	8000ab4 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d904      	bls.n	8000bac <HAL_RCC_ClockConfig+0x13c>
 8000ba2:	f240 315d 	movw	r1, #861	; 0x35d
 8000ba6:	4835      	ldr	r0, [pc, #212]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000ba8:	f000 fb61 	bl	800126e <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bac:	6862      	ldr	r2, [r4, #4]
 8000bae:	4d35      	ldr	r5, [pc, #212]	; (8000c84 <HAL_RCC_ClockConfig+0x214>)
 8000bb0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb4:	d11d      	bne.n	8000bf2 <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bba:	d0c0      	beq.n	8000b3e <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bbc:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bbe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc2:	f023 0303 	bic.w	r3, r3, #3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000bca:	f7ff fb01 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bce:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000bd0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d115      	bne.n	8000c02 <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd6:	686b      	ldr	r3, [r5, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	f43f af6c 	beq.w	8000aba <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be2:	f7ff faf5 	bl	80001d0 <HAL_GetTick>
 8000be6:	1bc0      	subs	r0, r0, r7
 8000be8:	4540      	cmp	r0, r8
 8000bea:	d9f4      	bls.n	8000bd6 <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8000bec:	2003      	movs	r0, #3
 8000bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bf2:	2a02      	cmp	r2, #2
 8000bf4:	d102      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bf6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bfa:	e7de      	b.n	8000bba <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	f013 0f02 	tst.w	r3, #2
 8000c00:	e7db      	b.n	8000bba <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d110      	bne.n	8000c28 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c06:	686b      	ldr	r3, [r5, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	f43f af54 	beq.w	8000aba <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c12:	f7ff fadd 	bl	80001d0 <HAL_GetTick>
 8000c16:	1bc0      	subs	r0, r0, r7
 8000c18:	4540      	cmp	r0, r8
 8000c1a:	d9f4      	bls.n	8000c06 <HAL_RCC_ClockConfig+0x196>
 8000c1c:	e7e6      	b.n	8000bec <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1e:	f7ff fad7 	bl	80001d0 <HAL_GetTick>
 8000c22:	1bc0      	subs	r0, r0, r7
 8000c24:	4540      	cmp	r0, r8
 8000c26:	d8e1      	bhi.n	8000bec <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c28:	686b      	ldr	r3, [r5, #4]
 8000c2a:	f013 0f0c 	tst.w	r3, #12
 8000c2e:	d1f6      	bne.n	8000c1e <HAL_RCC_ClockConfig+0x1ae>
 8000c30:	e743      	b.n	8000aba <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f023 0307 	bic.w	r3, r3, #7
 8000c38:	4333      	orrs	r3, r6
 8000c3a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f47f af7b 	bne.w	8000b3e <HAL_RCC_ClockConfig+0xce>
 8000c48:	e73e      	b.n	8000ac8 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000c4a:	68e3      	ldr	r3, [r4, #12]
 8000c4c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000c50:	d00c      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x1fc>
 8000c52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c56:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000c5a:	d007      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x1fc>
 8000c5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c60:	d004      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x1fc>
 8000c62:	f240 31b1 	movw	r1, #945	; 0x3b1
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_RCC_ClockConfig+0x20c>)
 8000c68:	f000 fb01 	bl	800126e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c6c:	686b      	ldr	r3, [r5, #4]
 8000c6e:	68e2      	ldr	r2, [r4, #12]
 8000c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c74:	4313      	orrs	r3, r2
 8000c76:	606b      	str	r3, [r5, #4]
 8000c78:	e72c      	b.n	8000ad4 <HAL_RCC_ClockConfig+0x64>
 8000c7a:	bf00      	nop
 8000c7c:	08001514 	.word	0x08001514
 8000c80:	40022000 	.word	0x40022000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	08001585 	.word	0x08001585
 8000c8c:	20000018 	.word	0x20000018

08000c90 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c9e:	6810      	ldr	r0, [r2, #0]
}    
 8000ca0:	40d8      	lsrs	r0, r3
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	08001595 	.word	0x08001595
 8000cac:	20000018 	.word	0x20000018

08000cb0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
} 
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	08001595 	.word	0x08001595
 8000ccc:	20000018 	.word	0x20000018

08000cd0 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8000cd0:	6842      	ldr	r2, [r0, #4]
 8000cd2:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <UART_SetConfig+0x198>)
{
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8000cd8:	429a      	cmp	r2, r3
{
 8000cda:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8000cdc:	d904      	bls.n	8000ce8 <UART_SetConfig+0x18>
 8000cde:	f640 11a7 	movw	r1, #2471	; 0x9a7
 8000ce2:	4862      	ldr	r0, [pc, #392]	; (8000e6c <UART_SetConfig+0x19c>)
 8000ce4:	f000 fac3 	bl	800126e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8000ce8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000cec:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8000cf0:	d004      	beq.n	8000cfc <UART_SetConfig+0x2c>
 8000cf2:	f640 11a8 	movw	r1, #2472	; 0x9a8
 8000cf6:	485d      	ldr	r0, [pc, #372]	; (8000e6c <UART_SetConfig+0x19c>)
 8000cf8:	f000 fab9 	bl	800126e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8000cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000d00:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000d04:	d007      	beq.n	8000d16 <UART_SetConfig+0x46>
 8000d06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d0a:	d004      	beq.n	8000d16 <UART_SetConfig+0x46>
 8000d0c:	f640 11a9 	movw	r1, #2473	; 0x9a9
 8000d10:	4856      	ldr	r0, [pc, #344]	; (8000e6c <UART_SetConfig+0x19c>)
 8000d12:	f000 faac 	bl	800126e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8000d16:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8000d1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8000d1e:	4213      	tst	r3, r2
 8000d20:	d100      	bne.n	8000d24 <UART_SetConfig+0x54>
 8000d22:	b923      	cbnz	r3, 8000d2e <UART_SetConfig+0x5e>
 8000d24:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8000d28:	4850      	ldr	r0, [pc, #320]	; (8000e6c <UART_SetConfig+0x19c>)
 8000d2a:	f000 faa0 	bl	800126e <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d2e:	f8d9 5000 	ldr.w	r5, [r9]
 8000d32:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8000d36:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d38:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d40:	4313      	orrs	r3, r2
 8000d42:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d44:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000d48:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000d50:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000d54:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d58:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d5e:	696b      	ldr	r3, [r5, #20]
 8000d60:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8000d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <UART_SetConfig+0x1a0>)
 8000d6e:	2419      	movs	r4, #25
 8000d70:	429d      	cmp	r5, r3
 8000d72:	d146      	bne.n	8000e02 <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d74:	f7ff ff9c 	bl	8000cb0 <HAL_RCC_GetPCLK2Freq>
 8000d78:	fb04 f300 	mul.w	r3, r4, r0
 8000d7c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d84:	00b6      	lsls	r6, r6, #2
 8000d86:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d8e:	011e      	lsls	r6, r3, #4
 8000d90:	f7ff ff8e 	bl	8000cb0 <HAL_RCC_GetPCLK2Freq>
 8000d94:	4360      	muls	r0, r4
 8000d96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000da0:	f7ff ff86 	bl	8000cb0 <HAL_RCC_GetPCLK2Freq>
 8000da4:	4360      	muls	r0, r4
 8000da6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000db4:	fb08 7313 	mls	r3, r8, r3, r7
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	3332      	adds	r3, #50	; 0x32
 8000dbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dc0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000dc4:	f7ff ff74 	bl	8000cb0 <HAL_RCC_GetPCLK2Freq>
 8000dc8:	4360      	muls	r0, r4
 8000dca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	fbb0 faf2 	udiv	sl, r0, r2
 8000dd4:	f7ff ff6c 	bl	8000cb0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000dd8:	4360      	muls	r0, r4
 8000dda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000de8:	fb08 a313 	mls	r3, r8, r3, sl
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	3332      	adds	r3, #50	; 0x32
 8000df0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	433b      	orrs	r3, r7
 8000dfa:	4433      	add	r3, r6
 8000dfc:	60ab      	str	r3, [r5, #8]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f7ff ff45 	bl	8000c90 <HAL_RCC_GetPCLK1Freq>
 8000e06:	fb04 f300 	mul.w	r3, r4, r0
 8000e0a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e0e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e12:	00b6      	lsls	r6, r6, #2
 8000e14:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e18:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e1c:	011e      	lsls	r6, r3, #4
 8000e1e:	f7ff ff37 	bl	8000c90 <HAL_RCC_GetPCLK1Freq>
 8000e22:	4360      	muls	r0, r4
 8000e24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e2e:	f7ff ff2f 	bl	8000c90 <HAL_RCC_GetPCLK1Freq>
 8000e32:	4360      	muls	r0, r4
 8000e34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e42:	fb08 7313 	mls	r3, r8, r3, r7
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	3332      	adds	r3, #50	; 0x32
 8000e4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e4e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e52:	f7ff ff1d 	bl	8000c90 <HAL_RCC_GetPCLK1Freq>
 8000e56:	4360      	muls	r0, r4
 8000e58:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	fbb0 faf2 	udiv	sl, r0, r2
 8000e62:	f7ff ff15 	bl	8000c90 <HAL_RCC_GetPCLK1Freq>
 8000e66:	e7b7      	b.n	8000dd8 <UART_SetConfig+0x108>
 8000e68:	0044aa20 	.word	0x0044aa20
 8000e6c:	0800154c 	.word	0x0800154c
 8000e70:	40013800 	.word	0x40013800

08000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	4604      	mov	r4, r0
 8000e78:	460e      	mov	r6, r1
 8000e7a:	4617      	mov	r7, r2
 8000e7c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000e7e:	6821      	ldr	r1, [r4, #0]
 8000e80:	680b      	ldr	r3, [r1, #0]
 8000e82:	ea36 0303 	bics.w	r3, r6, r3
 8000e86:	d101      	bne.n	8000e8c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e88:	2000      	movs	r0, #0
}
 8000e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e8c:	1c6b      	adds	r3, r5, #1
 8000e8e:	d0f7      	beq.n	8000e80 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e90:	b995      	cbnz	r5, 8000eb8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e92:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000e94:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000eac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eb8:	f7ff f98a 	bl	80001d0 <HAL_GetTick>
 8000ebc:	1bc0      	subs	r0, r0, r7
 8000ebe:	4285      	cmp	r5, r0
 8000ec0:	d2dd      	bcs.n	8000e7e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000ec2:	e7e6      	b.n	8000e92 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000ec4 <HAL_UART_Init>:
{
 8000ec4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d05b      	beq.n	8000f84 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8000ecc:	6981      	ldr	r1, [r0, #24]
 8000ece:	6803      	ldr	r3, [r0, #0]
 8000ed0:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <HAL_UART_Init+0xc4>)
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d04a      	beq.n	8000f6c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00c      	beq.n	8000ef4 <HAL_UART_Init+0x30>
 8000eda:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d008      	beq.n	8000ef4 <HAL_UART_Init+0x30>
 8000ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d004      	beq.n	8000ef4 <HAL_UART_Init+0x30>
 8000eea:	f240 110f 	movw	r1, #271	; 0x10f
 8000eee:	4827      	ldr	r0, [pc, #156]	; (8000f8c <HAL_UART_Init+0xc8>)
 8000ef0:	f000 f9bd 	bl	800126e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8000ef4:	69a3      	ldr	r3, [r4, #24]
 8000ef6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8000efa:	d004      	beq.n	8000f06 <HAL_UART_Init+0x42>
 8000efc:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8000f00:	4822      	ldr	r0, [pc, #136]	; (8000f8c <HAL_UART_Init+0xc8>)
 8000f02:	f000 f9b4 	bl	800126e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8000f06:	68a3      	ldr	r3, [r4, #8]
 8000f08:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8000f0c:	d004      	beq.n	8000f18 <HAL_UART_Init+0x54>
 8000f0e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <HAL_UART_Init+0xc8>)
 8000f14:	f000 f9ab 	bl	800126e <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f18:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8000f1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f20:	b923      	cbnz	r3, 8000f2c <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8000f22:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f000 fa10 	bl	800134c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f2c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f2e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f34:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f36:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f3c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f3e:	f7ff fec7 	bl	8000cd0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f42:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f44:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f54:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f5c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f5e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f60:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f66:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f6a:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d0ca      	beq.n	8000f06 <HAL_UART_Init+0x42>
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_UART_Init+0xcc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d0c7      	beq.n	8000f06 <HAL_UART_Init+0x42>
 8000f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d0c3      	beq.n	8000f06 <HAL_UART_Init+0x42>
 8000f7e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f82:	e7bd      	b.n	8000f00 <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8000f84:	2001      	movs	r0, #1
}
 8000f86:	bd10      	pop	{r4, pc}
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	0800154c 	.word	0x0800154c
 8000f90:	40004400 	.word	0x40004400

08000f94 <HAL_UART_Transmit>:
{
 8000f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f98:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000f9e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000fa0:	2b20      	cmp	r3, #32
{
 8000fa2:	460d      	mov	r5, r1
 8000fa4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000fa6:	d14e      	bne.n	8001046 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	d049      	beq.n	8001040 <HAL_UART_Transmit+0xac>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d047      	beq.n	8001040 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d046      	beq.n	8001046 <HAL_UART_Transmit+0xb2>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fc2:	2321      	movs	r3, #33	; 0x21
 8000fc4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000fc8:	f7ff f902 	bl	80001d0 <HAL_GetTick>
 8000fcc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000fce:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fd2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000fd6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b96b      	cbnz	r3, 8000ff8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4632      	mov	r2, r6
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f7ff ff46 	bl	8000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fe8:	b9a8      	cbnz	r0, 8001016 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000fea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000fec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ff0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ff8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ffa:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001002:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001004:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800100a:	4620      	mov	r0, r4
 800100c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800100e:	d10e      	bne.n	800102e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001010:	f7ff ff30 	bl	8000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001014:	b110      	cbz	r0, 800101c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001016:	2003      	movs	r0, #3
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800101c:	882b      	ldrh	r3, [r5, #0]
 800101e:	6822      	ldr	r2, [r4, #0]
 8001020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001024:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001026:	6923      	ldr	r3, [r4, #16]
 8001028:	b943      	cbnz	r3, 800103c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800102a:	3502      	adds	r5, #2
 800102c:	e7d3      	b.n	8000fd6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800102e:	f7ff ff21 	bl	8000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001032:	2800      	cmp	r0, #0
 8001034:	d1ef      	bne.n	8001016 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	782a      	ldrb	r2, [r5, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	3501      	adds	r5, #1
 800103e:	e7ca      	b.n	8000fd6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001040:	2001      	movs	r0, #1
 8001042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001046:	2002      	movs	r0, #2
}
 8001048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800104c <HAL_UART_Receive>:
{
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001050:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001052:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001056:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8001058:	2b20      	cmp	r3, #32
{
 800105a:	460d      	mov	r5, r1
 800105c:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800105e:	d151      	bne.n	8001104 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8001060:	2900      	cmp	r1, #0
 8001062:	d04c      	beq.n	80010fe <HAL_UART_Receive+0xb2>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d04a      	beq.n	80010fe <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8001068:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800106c:	2b01      	cmp	r3, #1
 800106e:	d049      	beq.n	8001104 <HAL_UART_Receive+0xb8>
 8001070:	2301      	movs	r3, #1
 8001072:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800107a:	2322      	movs	r3, #34	; 0x22
 800107c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001080:	f7ff f8a6 	bl	80001d0 <HAL_GetTick>
 8001084:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8001086:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800108a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 800108e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001090:	b280      	uxth	r0, r0
 8001092:	b930      	cbnz	r0, 80010a2 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001094:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001096:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 800109a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80010a2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010a4:	4632      	mov	r2, r6
      huart->RxXferCount--;
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010ac:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010ae:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010b4:	4620      	mov	r0, r4
 80010b6:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010b8:	d112      	bne.n	80010e0 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010ba:	f7ff fedb 	bl	8000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010be:	b110      	cbz	r0, 80010c6 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c6:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010c8:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010ca:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010cc:	b922      	cbnz	r2, 80010d8 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d2:	f825 3b02 	strh.w	r3, [r5], #2
 80010d6:	e7da      	b.n	800108e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f825 3b01 	strh.w	r3, [r5], #1
 80010de:	e7d6      	b.n	800108e <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010e0:	f7ff fec8 	bl	8000e74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d1eb      	bne.n	80010c0 <HAL_UART_Receive+0x74>
 80010e8:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010ea:	6921      	ldr	r1, [r4, #16]
 80010ec:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010ee:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010f0:	b911      	cbnz	r1, 80010f8 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010f2:	702b      	strb	r3, [r5, #0]
 80010f4:	4615      	mov	r5, r2
 80010f6:	e7ca      	b.n	800108e <HAL_UART_Receive+0x42>
 80010f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010fc:	e7f9      	b.n	80010f2 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
 8001100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001104:	2002      	movs	r0, #2
}
 8001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800110c <toggle_led_light_on>:
void confirm_master_connected()
{
}

void toggle_led_light_on()
{
 800110c:	b510      	push	{r4, lr}
    HAL_UART_Receive(&huart1, &generic_buffer, sizeof(generic_buffer), HAL_MAX_DELAY);
 800110e:	4c0f      	ldr	r4, [pc, #60]	; (800114c <toggle_led_light_on+0x40>)
 8001110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001114:	2203      	movs	r2, #3
 8001116:	4621      	mov	r1, r4
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <toggle_led_light_on+0x44>)
 800111a:	f7ff ff97 	bl	800104c <HAL_UART_Receive>
    if (generic_buffer[0] == 'y')
 800111e:	7823      	ldrb	r3, [r4, #0]
 8001120:	2b79      	cmp	r3, #121	; 0x79
 8001122:	d111      	bne.n	8001148 <toggle_led_light_on+0x3c>
    {
        HAL_UART_Transmit(&huart1, &on, sizeof(on), HAL_MAX_DELAY);
 8001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001128:	2206      	movs	r2, #6
 800112a:	490a      	ldr	r1, [pc, #40]	; (8001154 <toggle_led_light_on+0x48>)
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <toggle_led_light_on+0x44>)
 800112e:	f7ff ff31 	bl	8000f94 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //Toggle the state of pin P13 ( onboard LED pin for bluepill)
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <toggle_led_light_on+0x4c>)
 8001138:	f7ff fa4c 	bl	80005d4 <HAL_GPIO_TogglePin>
        // HAL_Delay(500);
        strcpy(generic_buffer, "");
 800113c:	4620      	mov	r0, r4
    }
}
 800113e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        strcpy(generic_buffer, "");
 8001142:	4906      	ldr	r1, [pc, #24]	; (800115c <toggle_led_light_on+0x50>)
 8001144:	f000 b990 	b.w	8001468 <strcpy>
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	2000003c 	.word	0x2000003c
 8001150:	20000040 	.word	0x20000040
 8001154:	2000000f 	.word	0x2000000f
 8001158:	40011000 	.word	0x40011000
 800115c:	0800154b 	.word	0x0800154b

08001160 <toggle_led_light_off>:

void toggle_led_light_off()
{
 8001160:	b510      	push	{r4, lr}
    if (generic_buffer[0] == 'n')
 8001162:	4c0b      	ldr	r4, [pc, #44]	; (8001190 <toggle_led_light_off+0x30>)
 8001164:	7823      	ldrb	r3, [r4, #0]
 8001166:	2b6e      	cmp	r3, #110	; 0x6e
 8001168:	d111      	bne.n	800118e <toggle_led_light_off+0x2e>
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <toggle_led_light_off+0x34>)
 8001170:	f7ff fa30 	bl	80005d4 <HAL_GPIO_TogglePin>
        HAL_UART_Transmit(&huart1, &off, sizeof(off), HAL_MAX_DELAY);
 8001174:	4908      	ldr	r1, [pc, #32]	; (8001198 <toggle_led_light_off+0x38>)
 8001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117a:	2207      	movs	r2, #7
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <toggle_led_light_off+0x3c>)
 800117e:	f7ff ff09 	bl	8000f94 <HAL_UART_Transmit>
        strcpy(generic_buffer, "");
 8001182:	4620      	mov	r0, r4
    }
}
 8001184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        strcpy(generic_buffer, "");
 8001188:	4905      	ldr	r1, [pc, #20]	; (80011a0 <toggle_led_light_off+0x40>)
 800118a:	f000 b96d 	b.w	8001468 <strcpy>
 800118e:	bd10      	pop	{r4, pc}
 8001190:	2000003c 	.word	0x2000003c
 8001194:	40011000 	.word	0x40011000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000040 	.word	0x20000040
 80011a0:	0800154b 	.word	0x0800154b

080011a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011a4:	b510      	push	{r4, lr}
 80011a6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	2210      	movs	r2, #16
 80011aa:	2100      	movs	r1, #0
 80011ac:	a802      	add	r0, sp, #8
 80011ae:	f000 f953 	bl	8001458 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_GPIO_Init+0x60>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011b4:	4c14      	ldr	r4, [pc, #80]	; (8001208 <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011b8:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	f002 0210 	and.w	r2, r2, #16
 80011ca:	9200      	str	r2, [sp, #0]
 80011cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011e2:	f7ff f9dd 	bl	80005a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	a902      	add	r1, sp, #8
 80011f8:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f7ff f864 	bl	80002c8 <HAL_GPIO_Init>

}
 8001200:	b006      	add	sp, #24
 8001202:	bd10      	pop	{r4, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40011000 	.word	0x40011000

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b500      	push	{lr}
 800120e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001210:	2228      	movs	r2, #40	; 0x28
 8001212:	2100      	movs	r1, #0
 8001214:	a806      	add	r0, sp, #24
 8001216:	f000 f91f 	bl	8001458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121a:	2214      	movs	r2, #20
 800121c:	2100      	movs	r1, #0
 800121e:	a801      	add	r0, sp, #4
 8001220:	f000 f91a 	bl	8001458 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f7ff f9df 	bl	80005f4 <HAL_RCC_OscConfig>
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001236:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001238:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800123c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001242:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001246:	f7ff fc13 	bl	8000a70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800124a:	b011      	add	sp, #68	; 0x44
 800124c:	f85d fb04 	ldr.w	pc, [sp], #4

08001250 <main>:
{
 8001250:	b508      	push	{r3, lr}
  HAL_Init();
 8001252:	f7fe ff9f 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001256:	f7ff ffd9 	bl	800120c <SystemClock_Config>
  MX_GPIO_Init();
 800125a:	f7ff ffa3 	bl	80011a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800125e:	f000 f859 	bl	8001314 <MX_USART1_UART_Init>
toggle_led_light_off();
 8001262:	f7ff ff7d 	bl	8001160 <toggle_led_light_off>
toggle_led_light_on();
 8001266:	f7ff ff51 	bl	800110c <toggle_led_light_on>
 800126a:	e7fa      	b.n	8001262 <main+0x12>

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	4770      	bx	lr

0800126e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800126e:	4770      	bx	lr

08001270 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_MspInit+0x3c>)
{
 8001272:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	f002 0201 	and.w	r2, r2, #1
 8001282:	9200      	str	r2, [sp, #0]
 8001284:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	69da      	ldr	r2, [r3, #28]
 8001288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800128c:	61da      	str	r2, [r3, #28]
 800128e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800129a:	6853      	ldr	r3, [r2, #4]
 800129c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	b002      	add	sp, #8
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000

080012b4 <NMI_Handler>:
 80012b4:	4770      	bx	lr

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler>

080012be <SVC_Handler>:
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f7fe bf78 	b.w	80001b8 <HAL_IncTick>

080012c8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SystemInit+0x40>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f042 0201 	orr.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <SystemInit+0x44>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012f4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <SystemInit+0x48>)
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	f8ff0000 	.word	0xf8ff0000
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001314:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8001316:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800131e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8001320:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001324:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001326:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001328:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	f7ff fdc7 	bl	8000ec4 <HAL_UART_Init>
 8001336:	b118      	cbz	r0, 8001340 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800133c:	f7ff bf96 	b.w	800126c <Error_Handler>
 8001340:	bd08      	pop	{r3, pc}
 8001342:	bf00      	nop
 8001344:	20000040 	.word	0x20000040
 8001348:	40013800 	.word	0x40013800

0800134c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800134c:	b510      	push	{r4, lr}
 800134e:	4604      	mov	r4, r0
 8001350:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	2210      	movs	r2, #16
 8001354:	2100      	movs	r1, #0
 8001356:	a802      	add	r0, sp, #8
 8001358:	f000 f87e 	bl	8001458 <memset>
  if(uartHandle->Instance==USART1)
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_UART_MspInit+0x70>)
 8001360:	429a      	cmp	r2, r3
 8001362:	d128      	bne.n	80013b6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001364:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001368:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800136c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	4812      	ldr	r0, [pc, #72]	; (80013c0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f042 0204 	orr.w	r2, r2, #4
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f7fe ff93 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	a902      	add	r1, sp, #8
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f7fe ff89 	bl	80002c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013b6:	b006      	add	sp, #24
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	bf00      	nop
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40010800 	.word	0x40010800

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013c6:	e003      	b.n	80013d0 <LoopCopyDataInit>

080013c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013ce:	3104      	adds	r1, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013d8:	d3f6      	bcc.n	80013c8 <CopyDataInit>
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013dc:	e002      	b.n	80013e4 <LoopFillZerobss>

080013de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013e0:	f842 3b04 	str.w	r3, [r2], #4

080013e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013e8:	d3f9      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ea:	f7ff ff6d 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f000 f80f 	bl	8001410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff ff2d 	bl	8001250 <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r3, =_sidata
 80013f8:	080015a8 	.word	0x080015a8
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001400:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8001404:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8001408:	20000080 	.word	0x20000080

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <__libc_init_array>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	2500      	movs	r5, #0
 8001414:	4e0c      	ldr	r6, [pc, #48]	; (8001448 <__libc_init_array+0x38>)
 8001416:	4c0d      	ldr	r4, [pc, #52]	; (800144c <__libc_init_array+0x3c>)
 8001418:	1ba4      	subs	r4, r4, r6
 800141a:	10a4      	asrs	r4, r4, #2
 800141c:	42a5      	cmp	r5, r4
 800141e:	d109      	bne.n	8001434 <__libc_init_array+0x24>
 8001420:	f000 f82a 	bl	8001478 <_init>
 8001424:	2500      	movs	r5, #0
 8001426:	4e0a      	ldr	r6, [pc, #40]	; (8001450 <__libc_init_array+0x40>)
 8001428:	4c0a      	ldr	r4, [pc, #40]	; (8001454 <__libc_init_array+0x44>)
 800142a:	1ba4      	subs	r4, r4, r6
 800142c:	10a4      	asrs	r4, r4, #2
 800142e:	42a5      	cmp	r5, r4
 8001430:	d105      	bne.n	800143e <__libc_init_array+0x2e>
 8001432:	bd70      	pop	{r4, r5, r6, pc}
 8001434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001438:	4798      	blx	r3
 800143a:	3501      	adds	r5, #1
 800143c:	e7ee      	b.n	800141c <__libc_init_array+0xc>
 800143e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001442:	4798      	blx	r3
 8001444:	3501      	adds	r5, #1
 8001446:	e7f2      	b.n	800142e <__libc_init_array+0x1e>
 8001448:	080015a0 	.word	0x080015a0
 800144c:	080015a0 	.word	0x080015a0
 8001450:	080015a0 	.word	0x080015a0
 8001454:	080015a4 	.word	0x080015a4

08001458 <memset>:
 8001458:	4603      	mov	r3, r0
 800145a:	4402      	add	r2, r0
 800145c:	4293      	cmp	r3, r2
 800145e:	d100      	bne.n	8001462 <memset+0xa>
 8001460:	4770      	bx	lr
 8001462:	f803 1b01 	strb.w	r1, [r3], #1
 8001466:	e7f9      	b.n	800145c <memset+0x4>

08001468 <strcpy>:
 8001468:	4603      	mov	r3, r0
 800146a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800146e:	f803 2b01 	strb.w	r2, [r3], #1
 8001472:	2a00      	cmp	r2, #0
 8001474:	d1f9      	bne.n	800146a <strcpy+0x2>
 8001476:	4770      	bx	lr

08001478 <_init>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr

08001484 <_fini>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	bf00      	nop
 8001488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148a:	bc08      	pop	{r3}
 800148c:	469e      	mov	lr, r3
 800148e:	4770      	bx	lr
